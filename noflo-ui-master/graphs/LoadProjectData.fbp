INPORT=Start.IN:DB
OUTPORT=Gather.PROJECTS:PROJECTS
OUTPORT=Errors.OUT:ERROR

'readonly' -> DATA HoldMode(core/Kick) OUT -> MODE Read(indexeddb/BeginTransaction)
Read ERROR -> IN Errors(core/Merge)
Read COMPLETE -> SEND Gather(ui/GatherProjectData)
Start(core/Repeat) OUT -> IN HoldMode
Start OUT -> DB Read
'projects,graphs,components' -> DATA HoldStores(core/Kick) OUT -> STORES Read
Start OUT -> IN HoldStores

# Read projects list
'projects' -> DATA HoldProjectStore(core/Kick) OUT -> NAME ProjectStore(indexeddb/GetStore)
Start OUT -> IN HoldProjectStore
Read TRANSACTION -> TRANSACTION ProjectStore
'' -> DATA HoldAllProjects(core/Kick) OUT -> ALL GetProjects(indexeddb/Query)
Start OUT -> IN HoldAllProjects
ProjectStore STORE -> STORE GetProjects ITEM -> PROJECT Gather

# Read graphs list
'graphs' -> DATA HoldGraphStore(core/Kick) OUT -> NAME GraphStore(indexeddb/GetStore)
Start OUT -> IN HoldGraphStore
ProjectStore TRANSACTION -> TRANSACTION GraphStore
'' -> DATA HoldAllGraphs(core/Kick) OUT -> ALL GetGraphs(indexeddb/Query)
GetProjects ITEM -> IN HoldAllGraphs
GraphStore STORE -> STORE GetGraphs
GetGraphs ITEM -> IN ConvertGraph(graph/LoadJson) OUT -> GRAPH Gather

# Read components list
'components' -> DATA HoldComponentStore(core/Kick) OUT -> NAME ComponentStore(indexeddb/GetStore)
Start OUT -> IN HoldComponentStore
GraphStore TRANSACTION -> TRANSACTION ComponentStore
'' -> DATA HoldAllComponents(core/Kick) OUT -> ALL GetComponents(indexeddb/Query)
GetProjects ITEM -> IN HoldAllComponents
ComponentStore STORE -> STORE GetComponents ITEM -> COMPONENT Gather
