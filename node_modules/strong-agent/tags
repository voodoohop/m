!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AGENT_SRC_COUNTERS_H_	src/counters.h	7;"	d
AGENT_SRC_DYNINST_H_	src/dyninst.h	7;"	d
AGENT_SRC_EXTRAS_H_	src/extras.h	7;"	d
AGENT_SRC_FEATURES_H_	src/features.h	7;"	d
AGENT_SRC_GCINFO_H_	src/gcinfo.h	7;"	d
AGENT_SRC_HEAPDIFF_H_	src/heapdiff.h	7;"	d
AGENT_SRC_PLATFORM_POSIX_H_	src/platform-posix.h	7;"	d
AGENT_SRC_PLATFORM_WIN32_H_	src/platform-win32.h	7;"	d
AGENT_SRC_PROFILER_H_	src/profiler.h	7;"	d
AGENT_SRC_STRONG_AGENT_H_	src/strong-agent.h	7;"	d
AGENT_SRC_UTIL_H_	src/util.h	7;"	d
AGENT_SRC_UTIL_INL_H_	src/util-inl.h	7;"	d
AGENT_SRC_UVMON_H_	src/uvmon.h	7;"	d
AGENT_SRC_WATCHDOG_H_	src/watchdog.h	7;"	d
ALL_METRICS_LIST	src/counters.h	/^enum Kind { ALL_METRICS_LIST(V) kMaxKind };$/;"	e	enum:strongloop::agent::counters::Kind
ALL_METRICS_LIST	src/counters.h	141;"	d
ASSERT	src/util.h	19;"	d
ASSERT_EQ	src/util.h	23;"	d
ASSERT_GE	src/util.h	24;"	d
ASSERT_GT	src/util.h	25;"	d
ASSERT_LE	src/util.h	26;"	d
ASSERT_LT	src/util.h	27;"	d
ASSERT_NE	src/util.h	28;"	d
AT_LEAST_V8_3_26	src/counters.h	17;"	d
AT_LEAST_V8_3_26	src/counters.h	20;"	d
AT_LEAST_V8_3_29	src/compat-inl.h	/^static const bool AT_LEAST_V8_3_29 =$/;"	m	namespace:compat::I
AT_MOST_V8_3_14	src/counters.h	18;"	d
AT_MOST_V8_3_14	src/counters.h	21;"	d
AddHeapGraphNodeToSet	src/heapdiff.h	/^void AddHeapGraphNodeToSet(const HeapGraphNode* node, HeapGraphNodeSet* set) {$/;"	f	namespace:strongloop::agent::heapdiff
AddHeapGraphNodeToSet	src/heapdiff.h	/^void AddHeapGraphNodeToSet(const HeapGraphNode* node, HeapGraphNodeSet* set);$/;"	p	namespace:strongloop::agent::heapdiff
AddHistogramSampleFunction	src/counters.h	/^inline void AddHistogramSampleFunction(void* histogram, int sample) {$/;"	f	namespace:strongloop::agent::counters
AfterGC	src/gcinfo.h	/^void AfterGC(GCType, GCCallbackFlags) {$/;"	f	namespace:strongloop::agent::gcinfo
AllStatic	src/compat.h	/^  AllStatic();$/;"	p	class:compat::AllStatic
AllStatic	src/compat.h	/^class AllStatic {$/;"	c	namespace:compat
ArgumentType	src/compat.h	/^typedef v8::Arguments ArgumentType;$/;"	t	namespace:compat
Array	src/compat.h	/^struct Array : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
Assert	src/util-inl.h	/^void Assert(const T& result, const char* expression) {$/;"	f	namespace:strongloop::agent
Assert	src/util.h	/^void Assert(const T& result, const char* expression);$/;"	p	namespace:strongloop::agent
BaseName	src/cpplint.py	/^  def BaseName(self):$/;"	m	class:FileInfo
Begin	src/cpplint.py	/^  def Begin(self, function_name):$/;"	m	class:_FunctionState
Boolean	src/compat.h	/^struct Boolean : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
CHECK	src/util.h	30;"	d
CHECK_EQ	src/util.h	34;"	d
CHECK_GE	src/util.h	35;"	d
CHECK_GT	src/util.h	36;"	d
CHECK_LE	src/util.h	37;"	d
CHECK_LT	src/util.h	38;"	d
CHECK_NE	src/util.h	39;"	d
CLANG_FORMAT	src/Makefile	/^CLANG_FORMAT ?= clang-format$/;"	m
COMPAT_H_	src/compat.h	16;"	d
COMPAT_INL_H_	src/compat-inl.h	16;"	d
COMPAT_ISOLATE	src/compat-inl.h	23;"	d
COMPAT_ISOLATE	src/compat-inl.h	384;"	d
COMPAT_ISOLATE_	src/compat-inl.h	24;"	d
COMPAT_ISOLATE_	src/compat-inl.h	383;"	d
COMPAT_NODE_VERSION_10	src/compat.h	27;"	d
COMPAT_NODE_VERSION_12	src/compat.h	23;"	d
Callback	src/strong-agent.h	/^  typedef void (*Callback)(WakeUp* w);$/;"	t	class:strongloop::agent::WakeUp
CanonicalizeAlphabeticalOrder	src/cpplint.py	/^  def CanonicalizeAlphabeticalOrder(self, header_path):$/;"	m	class:_IncludeState
Check	src/cpplint.py	/^  def Check(self, error, filename, linenum):$/;"	m	class:_FunctionState
Check	src/util-inl.h	/^void Check(const T& result, const char* expression) {$/;"	f	namespace:strongloop::agent
Check	src/util.h	/^void Check(const T& result, const char* expression);$/;"	p	namespace:strongloop::agent
CheckAccess	src/cpplint.py	/^def CheckAccess(filename, clean_lines, linenum, nesting_state, error):$/;"	f
CheckAltTokens	src/cpplint.py	/^def CheckAltTokens(filename, clean_lines, linenum, error):$/;"	f
CheckBegin	src/cpplint.py	/^  def CheckBegin(self, filename, clean_lines, linenum, error):$/;"	m	class:_BlockInfo
CheckBegin	src/cpplint.py	/^  def CheckBegin(self, filename, clean_lines, linenum, error):$/;"	m	class:_ClassInfo
CheckBraces	src/cpplint.py	/^def CheckBraces(filename, clean_lines, linenum, error):$/;"	f
CheckCStyleCast	src/cpplint.py	/^def CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern,$/;"	f
CheckCheck	src/cpplint.py	/^def CheckCheck(filename, clean_lines, linenum, error):$/;"	f
CheckComment	src/cpplint.py	/^def CheckComment(comment, filename, linenum, error):$/;"	f
CheckCompletedBlocks	src/cpplint.py	/^  def CheckCompletedBlocks(self, filename, error):$/;"	m	class:_NestingState
CheckEmptyBlockBody	src/cpplint.py	/^def CheckEmptyBlockBody(filename, clean_lines, linenum, error):$/;"	f
CheckEnd	src/cpplint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_BlockInfo
CheckEnd	src/cpplint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_ClassInfo
CheckEnd	src/cpplint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_NamespaceInfo
CheckForBadCharacters	src/cpplint.py	/^def CheckForBadCharacters(filename, lines, error):$/;"	f
CheckForCopyright	src/cpplint.py	/^def CheckForCopyright(filename, lines, error):$/;"	f
CheckForFunctionLengths	src/cpplint.py	/^def CheckForFunctionLengths(filename, clean_lines, linenum,$/;"	f
CheckForHeaderGuard	src/cpplint.py	/^def CheckForHeaderGuard(filename, lines, error):$/;"	f
CheckForIncludeWhatYouUse	src/cpplint.py	/^def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,$/;"	f
CheckForMultilineCommentsAndStrings	src/cpplint.py	/^def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):$/;"	f
CheckForNewlineAtEOF	src/cpplint.py	/^def CheckForNewlineAtEOF(filename, lines, error):$/;"	f
CheckForNonConstReference	src/cpplint.py	/^def CheckForNonConstReference(filename, clean_lines, linenum,$/;"	f
CheckForNonStandardConstructs	src/cpplint.py	/^def CheckForNonStandardConstructs(filename, clean_lines, linenum,$/;"	f
CheckIncludeLine	src/cpplint.py	/^def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):$/;"	f
CheckInvalidIncrement	src/cpplint.py	/^def CheckInvalidIncrement(filename, clean_lines, linenum, error):$/;"	f
CheckLanguage	src/cpplint.py	/^def CheckLanguage(filename, clean_lines, linenum, file_extension,$/;"	f
CheckMakePairUsesDeduction	src/cpplint.py	/^def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):$/;"	f
CheckNextIncludeOrder	src/cpplint.py	/^  def CheckNextIncludeOrder(self, header_type):$/;"	m	class:_IncludeState
CheckPosixThreading	src/cpplint.py	/^def CheckPosixThreading(filename, clean_lines, linenum, error):$/;"	f
CheckSectionSpacing	src/cpplint.py	/^def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):$/;"	f
CheckSpacing	src/cpplint.py	/^def CheckSpacing(filename, clean_lines, linenum, nesting_state, error):$/;"	f
CheckSpacingForFunctionCall	src/cpplint.py	/^def CheckSpacingForFunctionCall(filename, line, linenum, error):$/;"	f
CheckStyle	src/cpplint.py	/^def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,$/;"	f
CheckVlogArguments	src/cpplint.py	/^def CheckVlogArguments(filename, clean_lines, linenum, error):$/;"	f
CleanseComments	src/cpplint.py	/^def CleanseComments(line):$/;"	f
CleanseRawStrings	src/cpplint.py	/^def CleanseRawStrings(raw_lines):$/;"	f
CleansedLines	src/cpplint.py	/^class CleansedLines(object):$/;"	c	inherits:object
CloseExpression	src/cpplint.py	/^def CloseExpression(clean_lines, linenum, pos):$/;"	f
Compare	src/util-inl.h	/^int Compare(const T* a, const T* b, size_t size) {$/;"	f	namespace:strongloop::agent
Compare	src/util.h	/^int Compare(const T* a, const T* b, size_t size);$/;"	p	namespace:strongloop::agent
Copy	src/util-inl.h	/^T* Copy(T* to, const T* from, size_t size) {$/;"	f	namespace:strongloop::agent
Copy	src/util.h	/^T* Copy(T* to, const T* from, size_t size);$/;"	p	namespace:strongloop::agent
Count	src/cpplint.py	/^  def Count(self):$/;"	m	class:_FunctionState
CpuProfiler	src/compat.h	/^struct CpuProfiler : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
CpuTime	src/extras.h	/^C::ReturnType CpuTime(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::extras
CpuTime	src/platform-posix.h	/^void CpuTime(double* total_system, double* total_user) {$/;"	f	namespace:strongloop::agent::platform
CpuTime	src/platform-win32.h	/^void CpuTime(double* total_system, double* total_user) {$/;"	f	namespace:strongloop::agent::platform
CpuTime	src/strong-agent.h	/^void CpuTime(double* total_system, double* total_user);$/;"	p	namespace:strongloop::agent::platform
CreateHistogramFunction	src/counters.h	/^inline void* CreateHistogramFunction(const char* name, int \/* min *\/,$/;"	f	namespace:strongloop::agent::counters
DeleteAllHeapSnapshots	src/compat-inl.h	/^void HeapProfiler::DeleteAllHeapSnapshots(v8::Isolate* isolate) {$/;"	f	class:compat::HeapProfiler
DeleteAllHeapSnapshots	src/compat.h	/^  inline static void DeleteAllHeapSnapshots(v8::Isolate* isolate);$/;"	p	struct:compat::HeapProfiler
Dispose	src/util-inl.h	/^void Lazy<T>::Dispose() {$/;"	f	class:strongloop::agent::Lazy
Dispose	src/util.h	/^  inline void Dispose();$/;"	p	class:strongloop::agent::Lazy
End	src/cpplint.py	/^  def End(self):$/;"	m	class:_FunctionState
Error	src/cpplint.py	/^def Error(filename, linenum, category, confidence, message):$/;"	f
EscapeJson	src/profiler.h	/^std::string EscapeJson(const char* string, size_t size, size_t start = 0) {$/;"	f	namespace:strongloop::agent::profiler
Extension	src/cpplint.py	/^  def Extension(self):$/;"	m	class:FileInfo
FILTER	src/Makefile	/^FILTER = \\$/;"	m
False	src/compat-inl.h	/^v8::Local<v8::Boolean> False(v8::Isolate* isolate) {$/;"	f	namespace:compat
False	src/compat.h	/^inline v8::Local<v8::Boolean> False(v8::Isolate* isolate);$/;"	p	namespace:compat
FileInfo	src/cpplint.py	/^class FileInfo:$/;"	c	inherits:
FileTimeToFractionalSeconds	src/platform-win32.h	/^inline double FileTimeToFractionalSeconds(const FILETIME* time) {$/;"	f	namespace:strongloop::agent::platform::internal
FilesBelongToSameModule	src/cpplint.py	/^def FilesBelongToSameModule(filename_cc, filename_h):$/;"	f
FindEndOfExpressionInLine	src/cpplint.py	/^def FindEndOfExpressionInLine(line, startpos, depth, startchar, endchar):$/;"	f
FindNextMatchingAngleBracket	src/cpplint.py	/^def FindNextMatchingAngleBracket(clean_lines, linenum, init_suffix):$/;"	f
FindNextMultiLineCommentEnd	src/cpplint.py	/^def FindNextMultiLineCommentEnd(lines, lineix):$/;"	f
FindNextMultiLineCommentStart	src/cpplint.py	/^def FindNextMultiLineCommentStart(lines, lineix):$/;"	f
FindPreviousMatchingAngleBracket	src/cpplint.py	/^def FindPreviousMatchingAngleBracket(clean_lines, linenum, init_prefix):$/;"	f
FindProfilerTid	src/watchdog.h	/^inline pid_t FindProfilerTid() {$/;"	f	namespace:strongloop::agent::watchdog
FindStartOfExpressionInLine	src/cpplint.py	/^def FindStartOfExpressionInLine(line, endpos, depth, startchar, endchar):$/;"	f
FullName	src/cpplint.py	/^  def FullName(self):$/;"	m	class:FileInfo
FunctionCallback	src/compat.h	/^typedef v8::InvocationCallback FunctionCallback;$/;"	t	namespace:compat
FunctionTemplate	src/compat.h	/^struct FunctionTemplate : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
GetBindingObject	src/strong-agent.cc	/^Local<Object> GetBindingObject(Isolate* isolate) {$/;"	f	namespace:strongloop::agent
GetBindingObject	src/strong-agent.h	/^inline v8::Local<v8::Object> GetBindingObject(v8::Isolate* isolate);$/;"	p	namespace:strongloop::agent
GetHeaderGuardCPPVariable	src/cpplint.py	/^def GetHeaderGuardCPPVariable(filename):$/;"	f
GetHeapStatistics	src/compat-inl.h	/^void Isolate::GetHeapStatistics(v8::Isolate* isolate,$/;"	f	class:compat::Isolate
GetHeapStatistics	src/compat.h	/^  inline static void GetHeapStatistics(v8::Isolate* isolate,$/;"	p	struct:compat::Isolate
GetLineWidth	src/cpplint.py	/^def GetLineWidth(line):$/;"	f
GetPreviousNonBlankLine	src/cpplint.py	/^def GetPreviousNonBlankLine(clean_lines, linenum):$/;"	f
HISTOGRAM_MEMORY_LIST	src/counters.h	65;"	d
HISTOGRAM_PERCENTAGE_LIST	src/counters.h	36;"	d
HISTOGRAM_TIMER_LIST	src/counters.h	31;"	d
HandleScope	src/compat-inl.h	/^HandleScope::HandleScope(v8::Isolate* isolate) : handle_scope_(isolate) {}$/;"	f	class:compat::HandleScope
HandleScope	src/compat-inl.h	/^HandleScope::HandleScope(v8::Isolate*) {}$/;"	f	class:compat::HandleScope
HandleScope	src/compat.h	/^  inline explicit HandleScope(v8::Isolate* isolate);$/;"	p	class:compat::HandleScope
HandleScope	src/compat.h	/^class HandleScope {$/;"	c	namespace:compat
HasGetConstructorMethod	src/compat-inl.h	/^class HasGetConstructorMethod {$/;"	c	namespace:compat::I
HeapGraphNodeMap	src/heapdiff.h	/^typedef std::map<Key, Score> HeapGraphNodeMap;$/;"	t	namespace:strongloop::agent::heapdiff
HeapGraphNodeSet	src/heapdiff.h	/^typedef std::set<HeapGraphNodeWrap> HeapGraphNodeSet;$/;"	t	namespace:strongloop::agent::heapdiff
HeapGraphNodeVector	src/heapdiff.h	/^typedef std::vector<HeapGraphNodeWrap> HeapGraphNodeVector;$/;"	t	namespace:strongloop::agent::heapdiff
HeapGraphNodeWrap	src/heapdiff.h	/^  explicit HeapGraphNodeWrap(const HeapGraphNode* node);$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
HeapGraphNodeWrap	src/heapdiff.h	/^HeapGraphNodeWrap::HeapGraphNodeWrap(const HeapGraphNode* node)$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
HeapGraphNodeWrap	src/heapdiff.h	/^class HeapGraphNodeWrap {$/;"	c	namespace:strongloop::agent::heapdiff
HeapProfiler	src/compat.h	/^struct HeapProfiler : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
I	src/compat-inl.h	/^namespace I {$/;"	n	namespace:compat
InNamespaceBody	src/cpplint.py	/^  def InNamespaceBody(self):$/;"	m	class:_NestingState
IncrementErrorCount	src/cpplint.py	/^  def IncrementErrorCount(self, category):$/;"	m	class:_CppLintState
IndexedProperties	src/strong-agent.h	/^enum IndexedProperties {$/;"	g	namespace:strongloop::agent
Initialize	src/counters.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::counters
Initialize	src/dyninst.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::dyninst
Initialize	src/extras.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::extras
Initialize	src/gcinfo.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::gcinfo
Initialize	src/heapdiff.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::heapdiff
Initialize	src/profiler.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::profiler
Initialize	src/strong-agent.cc	/^void Initialize(Local<Object> binding) {$/;"	f	namespace:strongloop::agent
Initialize	src/strong-agent.cc	/^void WakeUp::Initialize() {$/;"	f	class:strongloop::agent::WakeUp
Initialize	src/strong-agent.h	/^  inline static void Initialize();$/;"	p	class:strongloop::agent::WakeUp
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::counters
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::dyninst
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::extras
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::gcinfo
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::heapdiff
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::profiler
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::uvmon
Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::watchdog
Initialize	src/util-inl.h	/^void Lazy<T>::Initialize() {$/;"	f	class:strongloop::agent::Lazy
Initialize	src/util-inl.h	/^void Lazy<T>::Initialize(A a) {$/;"	f	class:strongloop::agent::Lazy
Initialize	src/util-inl.h	/^void Lazy<T>::Initialize(A a, B b) {$/;"	f	class:strongloop::agent::Lazy
Initialize	src/util-inl.h	/^void Lazy<T>::Initialize(A a, B b, C c) {$/;"	f	class:strongloop::agent::Lazy
Initialize	src/util.h	/^  inline void Initialize();$/;"	p	class:strongloop::agent::Lazy
Initialize	src/util.h	/^  inline void Initialize(A);$/;"	p	class:strongloop::agent::Lazy
Initialize	src/util.h	/^  inline void Initialize(A, B);$/;"	p	class:strongloop::agent::Lazy
Initialize	src/util.h	/^  inline void Initialize(A, B, C);$/;"	p	class:strongloop::agent::Lazy
Initialize	src/uvmon.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::uvmon
Initialize	src/watchdog.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>) {$/;"	f	namespace:strongloop::agent::watchdog
InnermostClass	src/cpplint.py	/^  def InnermostClass(self):$/;"	m	class:_NestingState
Integer	src/compat.h	/^struct Integer : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
IsBlankLine	src/cpplint.py	/^def IsBlankLine(line):$/;"	f
IsCppString	src/cpplint.py	/^def IsCppString(line):$/;"	f
IsEmpty	src/compat-inl.h	/^bool Persistent<T>::IsEmpty() const {$/;"	f	class:compat::Persistent
IsEmpty	src/compat.h	/^  inline bool IsEmpty() const;$/;"	p	class:compat::Persistent
IsErrorSuppressedByNolint	src/cpplint.py	/^def IsErrorSuppressedByNolint(category, linenum):$/;"	f
IsInAlphabeticalOrder	src/cpplint.py	/^  def IsInAlphabeticalOrder(self, clean_lines, linenum, header_path):$/;"	m	class:_IncludeState
IsSource	src/cpplint.py	/^  def IsSource(self):$/;"	m	class:FileInfo
Isolate	src/compat.h	/^struct Isolate : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
JenkinsHash	src/heapdiff.h	/^uint32_t JenkinsHash(const uint8_t* data, unsigned size) {$/;"	f	namespace:strongloop::agent::heapdiff
JenkinsHash	src/heapdiff.h	/^uint32_t JenkinsHash(const uint8_t* data, unsigned size);$/;"	p	namespace:strongloop::agent::heapdiff
Key	src/heapdiff.h	/^  Key(const Key& that);$/;"	p	class:strongloop::agent::heapdiff::Key
Key	src/heapdiff.h	/^  explicit Key(Handle<String> string);$/;"	p	class:strongloop::agent::heapdiff::Key
Key	src/heapdiff.h	/^Key::Key(Handle<String> handle)$/;"	f	class:strongloop::agent::heapdiff::Key
Key	src/heapdiff.h	/^Key::Key(const Key& that)$/;"	f	class:strongloop::agent::heapdiff::Key
Key	src/heapdiff.h	/^class Key {$/;"	c	namespace:strongloop::agent::heapdiff
Kind	src/counters.h	/^enum Kind { ALL_METRICS_LIST(V) kMaxKind };$/;"	g	namespace:strongloop::agent::counters
Lazy	src/util-inl.h	/^Lazy<T>::Lazy()$/;"	f	class:strongloop::agent::Lazy
Lazy	src/util.h	/^  inline Lazy();$/;"	p	class:strongloop::agent::Lazy
Lazy	src/util.h	/^class Lazy {$/;"	c	namespace:strongloop::agent
M	src/compat-inl.h	/^  template <typename U> static int16_t M(int (*)[sizeof(&U::GetConstructor)]);$/;"	p	class:compat::I::HasGetConstructorMethod
M	src/compat-inl.h	/^  template <typename U> static int32_t M(...);$/;"	p	class:compat::I::HasGetConstructorMethod
Makefile	src/Makefile	1;"	F
Match	src/cpplint.py	/^def Match(pattern, s):$/;"	f
MaybeEscapeJson	src/profiler.h	/^std::string MaybeEscapeJson(const char* string, size_t size) {$/;"	f	namespace:strongloop::agent::profiler
Minus	src/heapdiff.h	/^  void Minus(const HeapGraphNodeWrap& wrapper);$/;"	p	class:strongloop::agent::heapdiff::Score
Minus	src/heapdiff.h	/^void Score::Minus(const HeapGraphNodeWrap& wrap) {$/;"	f	class:strongloop::agent::heapdiff::Score
New	src/compat-inl.h	/^v8::Local<v8::Array> Array::New(v8::Isolate* isolate, int length) {$/;"	f	class:compat::Array
New	src/compat-inl.h	/^v8::Local<v8::Boolean> Boolean::New(v8::Isolate* isolate, bool value) {$/;"	f	class:compat::Boolean
New	src/compat-inl.h	/^v8::Local<v8::FunctionTemplate> FunctionTemplate::New($/;"	f	class:compat::FunctionTemplate
New	src/compat-inl.h	/^v8::Local<v8::Integer> Integer::New(v8::Isolate* isolate, int32_t value) {$/;"	f	class:compat::Integer
New	src/compat-inl.h	/^v8::Local<v8::Number> Number::New(v8::Isolate* isolate, double value) {$/;"	f	class:compat::Number
New	src/compat-inl.h	/^v8::Local<v8::Object> Object::New(v8::Isolate* isolate) {$/;"	f	class:compat::Object
New	src/compat.h	/^  inline static v8::Local<v8::Array> New(v8::Isolate* isolate, int length = 0);$/;"	p	struct:compat::Array
New	src/compat.h	/^  inline static v8::Local<v8::Boolean> New(v8::Isolate* isolate, bool value);$/;"	p	struct:compat::Boolean
New	src/compat.h	/^  inline static v8::Local<v8::FunctionTemplate> New($/;"	p	struct:compat::FunctionTemplate
New	src/compat.h	/^  inline static v8::Local<v8::Integer> New(v8::Isolate* isolate, int32_t value);$/;"	p	struct:compat::Integer
New	src/compat.h	/^  inline static v8::Local<v8::Number> New(v8::Isolate* isolate, double value);$/;"	p	struct:compat::Number
New	src/compat.h	/^  inline static v8::Local<v8::Object> New(v8::Isolate* isolate);$/;"	p	struct:compat::Object
NewFromUnsigned	src/compat-inl.h	/^v8::Local<v8::Integer> Integer::NewFromUnsigned(v8::Isolate* isolate,$/;"	f	class:compat::Integer
NewFromUnsigned	src/compat.h	/^  inline static v8::Local<v8::Integer> NewFromUnsigned(v8::Isolate* isolate,$/;"	p	struct:compat::Integer
NewFromUtf8	src/compat-inl.h	/^v8::Local<v8::String> String::NewFromUtf8(v8::Isolate* isolate,$/;"	f	class:compat::String
NewFromUtf8	src/compat.h	/^  inline static v8::Local<v8::String> NewFromUtf8($/;"	p	struct:compat::String
NewStringType	src/compat.h	/^  enum NewStringType {$/;"	g	struct:compat::String
NoExtension	src/cpplint.py	/^  def NoExtension(self):$/;"	m	class:FileInfo
Null	src/compat-inl.h	/^v8::Local<v8::Primitive> Null(v8::Isolate* isolate) {$/;"	f	namespace:compat
Null	src/compat.h	/^inline v8::Local<v8::Primitive> Null(v8::Isolate* isolate);$/;"	p	namespace:compat
NumLines	src/cpplint.py	/^  def NumLines(self):$/;"	m	class:CleansedLines
Number	src/compat.h	/^struct Number : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
Object	src/compat.h	/^struct Object : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
OnCheck	src/uvmon.h	/^void OnCheck(uv_check_t* handle) {$/;"	f	namespace:strongloop::agent::uvmon
OnIdle	src/strong-agent.cc	/^void WakeUp::OnIdle(::uv_idle_t*) {$/;"	f	class:strongloop::agent::WakeUp
OnIdle	src/strong-agent.h	/^  inline static void OnIdle(::uv_idle_t*);$/;"	p	class:strongloop::agent::WakeUp
OnSignal	src/watchdog.h	/^inline void OnSignal(int signo) {$/;"	f	namespace:strongloop::agent::watchdog
OnWakeUp	src/counters.h	/^inline void OnWakeUp(WakeUp*) {  \/\/ NOLINT(readability\/function)$/;"	f	namespace:strongloop::agent::counters
OnWakeUp	src/gcinfo.h	/^inline void OnWakeUp(WakeUp*) {  \/\/ NOLINT(readability\/function)$/;"	f	namespace:strongloop::agent::gcinfo
PREFIX	src/Makefile	/^PREFIX ?= $(dir $(lastword $(MAKEFILE_LIST)))$/;"	m
PYTHON	src/Makefile	/^PYTHON ?= python$/;"	m
ParseArguments	src/cpplint.py	/^def ParseArguments(args):$/;"	f
ParseNolintSuppressions	src/cpplint.py	/^def ParseNolintSuppressions(filename, raw_line, linenum, error):$/;"	f
PatchSyscall	src/watchdog.h	/^inline void PatchSyscall() {$/;"	f	namespace:strongloop::agent::watchdog
Persistent	src/compat.h	/^class Persistent {$/;"	c	namespace:compat
Plus	src/heapdiff.h	/^  void Plus(const HeapGraphNodeWrap& wrapper);$/;"	p	class:strongloop::agent::heapdiff::Score
Plus	src/heapdiff.h	/^void Score::Plus(const HeapGraphNodeWrap& wrap) {$/;"	f	class:strongloop::agent::heapdiff::Score
PrintCategories	src/cpplint.py	/^def PrintCategories():$/;"	f
PrintErrorCounts	src/cpplint.py	/^  def PrintErrorCounts(self):$/;"	m	class:_CppLintState
PrintUsage	src/cpplint.py	/^def PrintUsage(message):$/;"	f
ProcessFile	src/cpplint.py	/^def ProcessFile(filename, vlevel, extra_check_functions=[]):$/;"	f
ProcessFileData	src/cpplint.py	/^def ProcessFileData(filename, file_extension, lines, error,$/;"	f
ProcessLine	src/cpplint.py	/^def ProcessLine(filename, file_extension, clean_lines, line,$/;"	f
QUEUE	src/queue.h	/^typedef void *QUEUE[2];$/;"	t
QUEUE_ADD	src/queue.h	37;"	d
QUEUE_DATA	src/queue.h	18;"	d
QUEUE_EMPTY	src/queue.h	24;"	d
QUEUE_FOREACH	src/queue.h	21;"	d
QUEUE_HEAD	src/queue.h	27;"	d
QUEUE_H_	src/queue.h	7;"	d
QUEUE_INIT	src/queue.h	30;"	d
QUEUE_INSERT_HEAD	src/queue.h	57;"	d
QUEUE_INSERT_TAIL	src/queue.h	66;"	d
QUEUE_NEXT	src/queue.h	12;"	d
QUEUE_NEXT_PREV	src/queue.h	15;"	d
QUEUE_PREV	src/queue.h	13;"	d
QUEUE_PREV_NEXT	src/queue.h	14;"	d
QUEUE_REMOVE	src/queue.h	75;"	d
QUEUE_SPLIT	src/queue.h	46;"	d
RemoveMultiLineComments	src/cpplint.py	/^def RemoveMultiLineComments(filename, lines, error):$/;"	f
RemoveMultiLineCommentsFromRange	src/cpplint.py	/^def RemoveMultiLineCommentsFromRange(lines, begin, end):$/;"	f
ReplaceAll	src/cpplint.py	/^def ReplaceAll(pattern, rep, s):$/;"	f
RepositoryName	src/cpplint.py	/^  def RepositoryName(self):$/;"	m	class:FileInfo
Reset	src/compat-inl.h	/^void Persistent<T>::Reset() {$/;"	f	class:compat::Persistent
Reset	src/compat-inl.h	/^void Persistent<T>::Reset(v8::Isolate* isolate, v8::Local<T> value) {$/;"	f	class:compat::Persistent
Reset	src/compat-inl.h	/^void Persistent<T>::Reset(v8::Isolate*, v8::Local<T> value) {$/;"	f	class:compat::Persistent
Reset	src/compat.h	/^  inline void Reset();$/;"	p	class:compat::Persistent
Reset	src/compat.h	/^  inline void Reset(v8::Isolate* isolate, v8::Local<T> value);$/;"	p	class:compat::Persistent
ResetErrorCounts	src/cpplint.py	/^  def ResetErrorCounts(self):$/;"	m	class:_CppLintState
ResetNolintSuppressions	src/cpplint.py	/^def ResetNolintSuppressions():$/;"	f
ResetSamples	src/counters.h	/^inline void ResetSamples() {$/;"	f	namespace:strongloop::agent::counters
ResetSection	src/cpplint.py	/^  def ResetSection(self):$/;"	m	class:_IncludeState
Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return() { return v8::Undefined(); }$/;"	f	class:compat::ReturnableHandleScope
Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return() {}$/;"	f	class:compat::ReturnableHandleScope
Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(bool value) {$/;"	f	class:compat::ReturnableHandleScope
Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(const char* value) {$/;"	f	class:compat::ReturnableHandleScope
Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(double value) {$/;"	f	class:compat::ReturnableHandleScope
Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(intptr_t value) {$/;"	f	class:compat::ReturnableHandleScope
Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(v8::Local<v8::Value> value) {$/;"	f	class:compat::ReturnableHandleScope
Return	src/compat.h	/^  inline ReturnType Return();$/;"	p	class:compat::ReturnableHandleScope
Return	src/compat.h	/^  inline ReturnType Return(bool value);$/;"	p	class:compat::ReturnableHandleScope
Return	src/compat.h	/^  inline ReturnType Return(const char* value);$/;"	p	class:compat::ReturnableHandleScope
Return	src/compat.h	/^  inline ReturnType Return(double value);$/;"	p	class:compat::ReturnableHandleScope
Return	src/compat.h	/^  inline ReturnType Return(intptr_t value);$/;"	p	class:compat::ReturnableHandleScope
Return	src/compat.h	/^  inline ReturnType Return(v8::Local<v8::Value> value);$/;"	p	class:compat::ReturnableHandleScope
ReturnType	src/compat.h	/^typedef v8::Handle<v8::Value> ReturnType;$/;"	t	namespace:compat
ReturnableHandleScope	src/compat-inl.h	/^ReturnableHandleScope::ReturnableHandleScope(const ArgumentType& args)$/;"	f	class:compat::ReturnableHandleScope
ReturnableHandleScope	src/compat.h	/^  inline explicit ReturnableHandleScope(const ArgumentType& args);$/;"	p	class:compat::ReturnableHandleScope
ReturnableHandleScope	src/compat.h	/^class ReturnableHandleScope {$/;"	c	namespace:compat
ReverseCloseExpression	src/cpplint.py	/^def ReverseCloseExpression(clean_lines, linenum, pos):$/;"	f
RunInDebugContext	src/dyninst.h	/^C::ReturnType RunInDebugContext(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::dyninst
SL_CLANG_AT_LEAST	src/features.h	74;"	d
SL_CLANG_AT_LEAST	src/features.h	80;"	d
SL_COMPILER_CLANG	src/features.h	10;"	d
SL_COMPILER_GCC	src/features.h	14;"	d
SL_COMPILER_MSVC	src/features.h	18;"	d
SL_CPU_ARM	src/features.h	46;"	d
SL_CPU_ARM64	src/features.h	50;"	d
SL_CPU_ARM_HARDFP	src/features.h	62;"	d
SL_CPU_BIG_ENDIAN	src/features.h	66;"	d
SL_CPU_BIG_ENDIAN	src/features.h	70;"	d
SL_CPU_MIPS	src/features.h	54;"	d
SL_CPU_X86_64	src/features.h	58;"	d
SL_GCC_AT_LEAST	src/features.h	84;"	d
SL_GCC_AT_LEAST	src/features.h	89;"	d
SL_INDEXED_PROPERTIES_MAP	src/strong-agent.h	/^  SL_INDEXED_PROPERTIES_MAP(V) kMaxIndexedProperties$/;"	e	enum:strongloop::agent::IndexedProperties
SL_INDEXED_PROPERTIES_MAP	src/strong-agent.h	47;"	d
SL_OS_DARWIN	src/features.h	22;"	d
SL_OS_FREEBSD	src/features.h	26;"	d
SL_OS_LINUX	src/features.h	30;"	d
SL_OS_POSIX	src/features.h	42;"	d
SL_OS_SOLARIS	src/features.h	38;"	d
SL_OS_WINDOWS	src/features.h	34;"	d
SOURCES	src/Makefile	/^SOURCES := $(SOURCES:%=$(PREFIX)%)$/;"	m
SOURCES	src/Makefile	/^SOURCES = \\$/;"	m
STATS_COUNTER_LIST	src/counters.h	101;"	d
STRINGIFY	src/util.h	17;"	d
STRINGIFY_HELPER	src/util.h	15;"	d
Score	src/heapdiff.h	/^  Score();$/;"	p	class:strongloop::agent::heapdiff::Score
Score	src/heapdiff.h	/^Score::Score() : count_(0), size_(0) {}$/;"	f	class:strongloop::agent::heapdiff::Score
Score	src/heapdiff.h	/^class Score {$/;"	c	namespace:strongloop::agent::heapdiff
Search	src/cpplint.py	/^def Search(pattern, s):$/;"	f
SeenOpenBrace	src/cpplint.py	/^  def SeenOpenBrace(self):$/;"	m	class:_NestingState
SerializeCpuProfile	src/profiler.h	/^void SerializeCpuProfile(const CpuProfile* profile, std::ostream* sink) {$/;"	f	namespace:strongloop::agent::profiler
SerializeCpuProfileNode	src/profiler.h	/^void SerializeCpuProfileNode(const CpuProfileNode* node, std::ostream* sink) {$/;"	f	namespace:strongloop::agent::profiler
SetAddHistogramSampleFunction	src/compat-inl.h	/^void Isolate::SetAddHistogramSampleFunction($/;"	f	class:compat::Isolate
SetAddHistogramSampleFunction	src/compat-inl.h	/^void SetAddHistogramSampleFunction(U* isolate,$/;"	f	namespace:compat::I
SetAddHistogramSampleFunction	src/compat-inl.h	/^void SetAddHistogramSampleFunction(U*, v8::AddHistogramSampleCallback callback,$/;"	f	namespace:compat::I
SetAddHistogramSampleFunction	src/compat.h	/^  inline static void SetAddHistogramSampleFunction($/;"	p	struct:compat::Isolate
SetCountingStyle	src/cpplint.py	/^  def SetCountingStyle(self, counting_style):$/;"	m	class:_CppLintState
SetCreateHistogramFunction	src/compat-inl.h	/^void Isolate::SetCreateHistogramFunction(v8::Isolate* isolate,$/;"	f	class:compat::Isolate
SetCreateHistogramFunction	src/compat-inl.h	/^void SetCreateHistogramFunction(U* isolate,$/;"	f	namespace:compat::I
SetCreateHistogramFunction	src/compat-inl.h	/^void SetCreateHistogramFunction(U*, v8::CreateHistogramCallback callback,$/;"	f	namespace:compat::I
SetCreateHistogramFunction	src/compat.h	/^  inline static void SetCreateHistogramFunction($/;"	p	struct:compat::Isolate
SetFilters	src/cpplint.py	/^  def SetFilters(self, filters):$/;"	m	class:_CppLintState
SetLastHeader	src/cpplint.py	/^  def SetLastHeader(self, header_path):$/;"	m	class:_IncludeState
SetOutputFormat	src/cpplint.py	/^  def SetOutputFormat(self, output_format):$/;"	m	class:_CppLintState
SetVerboseLevel	src/cpplint.py	/^  def SetVerboseLevel(self, level):$/;"	m	class:_CppLintState
Split	src/cpplint.py	/^  def Split(self):$/;"	m	class:FileInfo
Start	src/strong-agent.cc	/^bool WakeUp::Start() {$/;"	f	class:strongloop::agent::WakeUp
Start	src/strong-agent.h	/^  inline bool Start();$/;"	p	class:strongloop::agent::WakeUp
StartCounters	src/counters.h	/^C::ReturnType StartCounters(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::counters
StartCpuProfiling	src/compat-inl.h	/^void CpuProfiler::StartCpuProfiling(v8::Isolate* isolate,$/;"	f	class:compat::CpuProfiler
StartCpuProfiling	src/compat.h	/^  static void StartCpuProfiling($/;"	p	struct:compat::CpuProfiler
StartCpuProfiling	src/profiler.h	/^C::ReturnType StartCpuProfiling(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::profiler
StartCpuProfiling	src/strong-agent.h	/^void StartCpuProfiling(v8::Isolate* isolate, uint64_t timeout);$/;"	p	namespace:strongloop::agent::watchdog
StartCpuProfiling	src/watchdog.h	/^void StartCpuProfiling(v8::Isolate* isolate, uint64_t timeout_in_ms) {$/;"	f	namespace:strongloop::agent::watchdog
StartGarbageCollectorStatistics	src/gcinfo.h	/^C::ReturnType StartGarbageCollectorStatistics(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::gcinfo
StartHeapDiff	src/heapdiff.h	/^C::ReturnType StartHeapDiff(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::heapdiff
Stop	src/strong-agent.cc	/^bool WakeUp::Stop() {$/;"	f	class:strongloop::agent::WakeUp
Stop	src/strong-agent.h	/^  inline bool Stop();$/;"	p	class:strongloop::agent::WakeUp
StopCounters	src/counters.h	/^C::ReturnType StopCounters(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::counters
StopCpuProfiling	src/compat-inl.h	/^const v8::CpuProfile* CpuProfiler::StopCpuProfiling($/;"	f	class:compat::CpuProfiler
StopCpuProfiling	src/compat.h	/^  static const v8::CpuProfile* StopCpuProfiling($/;"	p	struct:compat::CpuProfiler
StopCpuProfiling	src/profiler.h	/^C::ReturnType StopCpuProfiling(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::profiler
StopCpuProfiling	src/strong-agent.h	/^const v8::CpuProfile* StopCpuProfiling(v8::Isolate* isolate);$/;"	p	namespace:strongloop::agent::watchdog
StopCpuProfiling	src/watchdog.h	/^const v8::CpuProfile* StopCpuProfiling(v8::Isolate* isolate) {$/;"	f	namespace:strongloop::agent::watchdog
StopCpuProfilingAndSerialize	src/profiler.h	/^C::ReturnType StopCpuProfilingAndSerialize(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::profiler
StopGarbageCollectorStatistics	src/gcinfo.h	/^C::ReturnType StopGarbageCollectorStatistics(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::gcinfo
StopHeapDiff	src/heapdiff.h	/^C::ReturnType StopHeapDiff(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::heapdiff
String	src/compat.h	/^struct String : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
Summarize	src/heapdiff.h	/^Local<Object> Summarize(Isolate* isolate, const HeapSnapshot* start_snapshot,$/;"	f	namespace:strongloop::agent::heapdiff
Summarize	src/heapdiff.h	/^Local<Object> Summarize(Isolate* isolate, const HeapSnapshot* start_snapshot,$/;"	p	namespace:strongloop::agent::heapdiff
SummarizeHelper	src/heapdiff.h	/^  explicit SummarizeHelper(HeapGraphNodeMap* map) : map_(map) {}$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
SummarizeHelper	src/heapdiff.h	/^struct SummarizeHelper : public std::iterator<std::output_iterator_tag, Score> {$/;"	s	namespace:strongloop::agent::heapdiff	inherits:std::iterator
Syscall	src/watchdog.h	/^inline long Syscall(long nr, long a, long b, long c,  \/\/ NOLINT(runtime\/int)$/;"	f	namespace:strongloop::agent::watchdog
T	src/util.h	/^size_t ArraySize(const T(&a)[N]);$/;"	m	namespace:strongloop::agent
TakeHeapSnapshot	src/compat-inl.h	/^const v8::HeapSnapshot* HeapProfiler::TakeHeapSnapshot($/;"	f	class:compat::HeapProfiler
TakeHeapSnapshot	src/compat.h	/^  inline static const v8::HeapSnapshot* TakeHeapSnapshot($/;"	p	struct:compat::HeapProfiler
Throw	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Throw(v8::Local<v8::Value> exception) {$/;"	f	class:compat::ReturnableHandleScope
Throw	src/compat.h	/^  inline ReturnType Throw(v8::Local<v8::Value> exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
ThrowError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowError(v8::Local<v8::String> exception) {$/;"	f	class:compat::ReturnableHandleScope
ThrowError	src/compat.h	/^  inline ReturnType ThrowError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowError	src/compat.h	/^  inline ReturnType ThrowError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowException	src/compat-inl.h	/^v8::Local<v8::Value> Isolate::ThrowException(v8::Isolate* isolate,$/;"	f	class:compat::Isolate
ThrowException	src/compat.h	/^  inline static v8::Local<v8::Value> ThrowException($/;"	p	struct:compat::Isolate
ThrowRangeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowRangeError($/;"	f	class:compat::ReturnableHandleScope
ThrowRangeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowRangeError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
ThrowRangeError	src/compat.h	/^  inline ReturnType ThrowRangeError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowRangeError	src/compat.h	/^  inline ReturnType ThrowRangeError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowReferenceError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowReferenceError($/;"	f	class:compat::ReturnableHandleScope
ThrowReferenceError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowReferenceError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
ThrowReferenceError	src/compat.h	/^  inline ReturnType ThrowReferenceError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowReferenceError	src/compat.h	/^  inline ReturnType ThrowReferenceError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowSyntaxError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowSyntaxError($/;"	f	class:compat::ReturnableHandleScope
ThrowSyntaxError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowSyntaxError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
ThrowSyntaxError	src/compat.h	/^  inline ReturnType ThrowSyntaxError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowSyntaxError	src/compat.h	/^  inline ReturnType ThrowSyntaxError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowTypeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowTypeError($/;"	f	class:compat::ReturnableHandleScope
ThrowTypeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowTypeError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
ThrowTypeError	src/compat.h	/^  inline ReturnType ThrowTypeError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
ThrowTypeError	src/compat.h	/^  inline ReturnType ThrowTypeError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
ToLocal	src/compat-inl.h	/^inline v8::Local<T> ToLocal(v8::Handle<T> handle) {$/;"	f	namespace:compat::I
ToLocal	src/compat-inl.h	/^inline v8::Local<T> ToLocal(v8::Local<T> handle) {$/;"	f	namespace:compat::I
ToLocal	src/compat-inl.h	/^v8::Local<T> Persistent<T>::ToLocal(v8::Isolate* isolate) const {$/;"	f	class:compat::Persistent
ToLocal	src/compat-inl.h	/^v8::Local<T> Persistent<T>::ToLocal(v8::Isolate*) const {$/;"	f	class:compat::Persistent
ToLocal	src/compat.h	/^  inline v8::Local<T> ToLocal(v8::Isolate* isolate) const;$/;"	p	class:compat::Persistent
ToObject	src/profiler.h	/^Local<Object> ToObject(Isolate* isolate, const CpuProfileNode* node) {$/;"	f	namespace:strongloop::agent::profiler
True	src/compat-inl.h	/^v8::Local<v8::Boolean> True(v8::Isolate* isolate) {$/;"	f	namespace:compat
True	src/compat.h	/^inline v8::Local<v8::Boolean> True(v8::Isolate* isolate);$/;"	p	namespace:compat
Undefined	src/compat-inl.h	/^v8::Local<v8::Primitive> Undefined(v8::Isolate* isolate) {$/;"	f	namespace:compat
Undefined	src/compat.h	/^inline v8::Local<v8::Primitive> Undefined(v8::Isolate* isolate);$/;"	p	namespace:compat
Update	src/cpplint.py	/^  def Update(self, filename, clean_lines, linenum, error):$/;"	m	class:_NestingState
UpdateIncludeState	src/cpplint.py	/^def UpdateIncludeState(filename, include_state, io=codecs):$/;"	f
UpdatePreprocessor	src/cpplint.py	/^  def UpdatePreprocessor(self, line):$/;"	m	class:_NestingState
Use	src/compat-inl.h	/^inline void Use(const T&) {}$/;"	f	namespace:compat::I
Use	src/util-inl.h	/^void Use(const T&) {}$/;"	f	namespace:strongloop::agent
Use	src/util.h	/^void Use(const T&);$/;"	p	namespace:strongloop::agent
V	src/counters.h	160;"	d
V	src/counters.h	162;"	d
V	src/counters.h	186;"	d
V	src/counters.h	192;"	d
V	src/counters.h	255;"	d
V	src/counters.h	259;"	d
V	src/strong-agent.cc	102;"	d	file:
V	src/strong-agent.cc	98;"	d	file:
V	src/strong-agent.h	53;"	d
V	src/strong-agent.h	55;"	d
WakeUp	src/strong-agent.cc	/^WakeUp::WakeUp(Callback callback) : callback_(callback) { QUEUE_INIT(&queue_); }$/;"	f	class:strongloop::agent::WakeUp
WakeUp	src/strong-agent.h	/^  WakeUp(const WakeUp&);$/;"	p	class:strongloop::agent::WakeUp
WakeUp	src/strong-agent.h	/^  inline explicit WakeUp(Callback callback);$/;"	p	class:strongloop::agent::WakeUp
WakeUp	src/strong-agent.h	/^class WakeUp {$/;"	c	namespace:strongloop::agent
_ALT_TOKEN_REPLACEMENT	src/cpplint.py	/^_ALT_TOKEN_REPLACEMENT = {$/;"	v
_ALT_TOKEN_REPLACEMENT_PATTERN	src/cpplint.py	/^_ALT_TOKEN_REPLACEMENT_PATTERN = re.compile($/;"	v
_BLOCK_ASM	src/cpplint.py	/^_BLOCK_ASM = 3    # The whole block is an inline assembly block$/;"	v
_BlockInfo	src/cpplint.py	/^class _BlockInfo(object):$/;"	c	inherits:object
_CHECK_MACROS	src/cpplint.py	/^_CHECK_MACROS = [$/;"	v
_CHECK_REPLACEMENT	src/cpplint.py	/^_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])$/;"	v
_CPP_HEADERS	src/cpplint.py	/^_CPP_HEADERS = frozenset([$/;"	v
_CPP_SECTION	src/cpplint.py	/^  _CPP_SECTION = 3$/;"	v	class:_IncludeState
_CPP_SYS_HEADER	src/cpplint.py	/^_CPP_SYS_HEADER = 2$/;"	v
_C_SECTION	src/cpplint.py	/^  _C_SECTION = 2$/;"	v	class:_IncludeState
_C_SYS_HEADER	src/cpplint.py	/^_C_SYS_HEADER = 1$/;"	v
_ClassInfo	src/cpplint.py	/^class _ClassInfo(_BlockInfo):$/;"	c	inherits:_BlockInfo
_ClassifyInclude	src/cpplint.py	/^def _ClassifyInclude(fileinfo, include, is_system):$/;"	f
_CollapseStrings	src/cpplint.py	/^  def _CollapseStrings(elided):$/;"	m	class:CleansedLines
_CppLintState	src/cpplint.py	/^class _CppLintState(object):$/;"	c	inherits:object
_DEFAULT_FILTERS	src/cpplint.py	/^_DEFAULT_FILTERS = ['-build\/include_alpha']$/;"	v
_DropCommonSuffixes	src/cpplint.py	/^def _DropCommonSuffixes(filename):$/;"	f
_END_ASM	src/cpplint.py	/^_END_ASM = 2      # Last line of inline assembly block$/;"	v
_ERROR_CATEGORIES	src/cpplint.py	/^_ERROR_CATEGORIES = [$/;"	v
_Filters	src/cpplint.py	/^def _Filters():$/;"	f
_FunctionState	src/cpplint.py	/^class _FunctionState(object):$/;"	c	inherits:object
_GetTextInside	src/cpplint.py	/^def _GetTextInside(text, start_pattern):$/;"	f
_HEADERS_CONTAINING_TEMPLATES	src/cpplint.py	/^_HEADERS_CONTAINING_TEMPLATES = ($/;"	v
_INITIAL_SECTION	src/cpplint.py	/^  _INITIAL_SECTION = 0$/;"	v	class:_IncludeState
_INSIDE_ASM	src/cpplint.py	/^_INSIDE_ASM = 1   # Inside inline assembly block$/;"	v
_IncludeError	src/cpplint.py	/^class _IncludeError(Exception):$/;"	c	inherits:Exception
_IncludeState	src/cpplint.py	/^class _IncludeState(dict):$/;"	c	inherits:dict
_IsTestFilename	src/cpplint.py	/^def _IsTestFilename(filename):$/;"	f
_LIKELY_MY_HEADER	src/cpplint.py	/^_LIKELY_MY_HEADER = 3$/;"	v
_MATCH_ASM	src/cpplint.py	/^_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'$/;"	v
_MY_H_SECTION	src/cpplint.py	/^  _MY_H_SECTION = 1$/;"	v	class:_IncludeState
_NORMAL_TRIGGER	src/cpplint.py	/^  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.$/;"	v	class:_FunctionState
_NO_ASM	src/cpplint.py	/^_NO_ASM = 0       # Outside of inline assembly block$/;"	v
_NamespaceInfo	src/cpplint.py	/^class _NamespaceInfo(_BlockInfo):$/;"	c	inherits:_BlockInfo
_NestingState	src/cpplint.py	/^class _NestingState(object):$/;"	c	inherits:object
_OTHER_HEADER	src/cpplint.py	/^_OTHER_HEADER = 5$/;"	v
_OTHER_H_SECTION	src/cpplint.py	/^  _OTHER_H_SECTION = 4$/;"	v	class:_IncludeState
_OutputFormat	src/cpplint.py	/^def _OutputFormat():$/;"	f
_POSSIBLE_MY_HEADER	src/cpplint.py	/^_POSSIBLE_MY_HEADER = 4$/;"	v
_PreprocessorInfo	src/cpplint.py	/^class _PreprocessorInfo(object):$/;"	c	inherits:object
_RE_FIRST_COMPONENT	src/cpplint.py	/^_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')$/;"	v
_RE_PATTERN_CLEANSE_LINE_C_COMMENTS	src/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES	src/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES = re.compile(r'"[^"]*"')$/;"	v
_RE_PATTERN_CLEANSE_LINE_ESCAPES	src/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES	src/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES = re.compile(r"'.'")$/;"	v
_RE_PATTERN_CONST_REF_PARAM	src/cpplint.py	/^_RE_PATTERN_CONST_REF_PARAM = ($/;"	v
_RE_PATTERN_EXPLICIT_MAKEPAIR	src/cpplint.py	/^_RE_PATTERN_EXPLICIT_MAKEPAIR = re.compile(r'\\bmake_pair\\s*<')$/;"	v
_RE_PATTERN_IDENT	src/cpplint.py	/^_RE_PATTERN_IDENT = r'[_a-zA-Z]\\w*'  # =~ [[:alpha:]][[:alnum:]]*$/;"	v
_RE_PATTERN_INCLUDE	src/cpplint.py	/^_RE_PATTERN_INCLUDE = re.compile(r'^\\s*#\\s*include\\s*([<"])([^>"]*)[>"].*$')$/;"	v
_RE_PATTERN_INCLUDE_NEW_STYLE	src/cpplint.py	/^_RE_PATTERN_INCLUDE_NEW_STYLE = re.compile(r'#include +"[^\/]+\\.h"')$/;"	v
_RE_PATTERN_INVALID_INCREMENT	src/cpplint.py	/^_RE_PATTERN_INVALID_INCREMENT = re.compile($/;"	v
_RE_PATTERN_REF_PARAM	src/cpplint.py	/^_RE_PATTERN_REF_PARAM = re.compile($/;"	v
_RE_PATTERN_STRING	src/cpplint.py	/^_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')$/;"	v
_RE_PATTERN_TODO	src/cpplint.py	/^_RE_PATTERN_TODO = re.compile(r'^\/\/(\\s*)TODO(\\(.+?\\))?:?(\\s|$)?')$/;"	v
_RE_PATTERN_TYPE	src/cpplint.py	/^_RE_PATTERN_TYPE = ($/;"	v
_RE_SUPPRESSION	src/cpplint.py	/^_RE_SUPPRESSION = re.compile(r'\\bNOLINT\\b(\\([^)]*\\))?')$/;"	v
_SECTION_NAMES	src/cpplint.py	/^  _SECTION_NAMES = {$/;"	v	class:_IncludeState
_SetCountingStyle	src/cpplint.py	/^def _SetCountingStyle(level):$/;"	f
_SetFilters	src/cpplint.py	/^def _SetFilters(filters):$/;"	f
_SetOutputFormat	src/cpplint.py	/^def _SetOutputFormat(output_format):$/;"	f
_SetVerboseLevel	src/cpplint.py	/^def _SetVerboseLevel(level):$/;"	f
_ShouldPrintError	src/cpplint.py	/^def _ShouldPrintError(category, confidence, linenum):$/;"	f
_TEST_TRIGGER	src/cpplint.py	/^  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.$/;"	v	class:_FunctionState
_TYPE_NAMES	src/cpplint.py	/^  _TYPE_NAMES = {$/;"	v	class:_IncludeState
_VerboseLevel	src/cpplint.py	/^def _VerboseLevel():$/;"	f
__init__	src/cpplint.py	/^  def __init__(self):$/;"	m	class:_CppLintState
__init__	src/cpplint.py	/^  def __init__(self):$/;"	m	class:_FunctionState
__init__	src/cpplint.py	/^  def __init__(self):$/;"	m	class:_IncludeState
__init__	src/cpplint.py	/^  def __init__(self):$/;"	m	class:_NestingState
__init__	src/cpplint.py	/^  def __init__(self, filename):$/;"	m	class:FileInfo
__init__	src/cpplint.py	/^  def __init__(self, lines):$/;"	m	class:CleansedLines
__init__	src/cpplint.py	/^  def __init__(self, name, class_or_struct, clean_lines, linenum):$/;"	m	class:_ClassInfo
__init__	src/cpplint.py	/^  def __init__(self, name, linenum):$/;"	m	class:_NamespaceInfo
__init__	src/cpplint.py	/^  def __init__(self, seen_open_brace):$/;"	m	class:_BlockInfo
__init__	src/cpplint.py	/^  def __init__(self, stack_before_if):$/;"	m	class:_PreprocessorInfo
_cpplint_state	src/cpplint.py	/^_cpplint_state = _CppLintState()$/;"	v
_error_suppressions	src/cpplint.py	/^_error_suppressions = {}$/;"	v
_line_length	src/cpplint.py	/^_line_length = 80$/;"	v
_re_pattern_algorithm_header	src/cpplint.py	/^_re_pattern_algorithm_header = []$/;"	v
_re_pattern_templates	src/cpplint.py	/^_re_pattern_templates = []$/;"	v
_regexp_compile_cache	src/cpplint.py	/^_regexp_compile_cache = {}$/;"	v
_root	src/cpplint.py	/^_root = None$/;"	v
_valid_extensions	src/cpplint.py	/^_valid_extensions = set(['cc', 'h', 'cpp', 'cu', 'cuh'])$/;"	v
address	src/util-inl.h	/^T* Lazy<T>::address() {$/;"	f	class:strongloop::agent::Lazy
address	src/util.h	/^  inline T* address();$/;"	p	class:strongloop::agent::Lazy
agent	src/counters.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/dyninst.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/extras.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/gcinfo.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/heapdiff.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/platform-posix.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/platform-win32.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/profiler.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/strong-agent.cc	/^namespace agent {$/;"	n	namespace:strongloop	file:
agent	src/strong-agent.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/util-inl.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/util.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/uvmon.h	/^namespace agent {$/;"	n	namespace:strongloop
agent	src/watchdog.h	/^namespace agent {$/;"	n	namespace:strongloop
args_	src/compat.h	/^  const ArgumentType& args_;$/;"	m	class:compat::ReturnableHandleScope
binding_object	src/strong-agent.cc	/^static C::Persistent<Object> binding_object;$/;"	m	namespace:strongloop::agent	file:
buffer_	src/heapdiff.h	/^  uint16_t buffer_[32];$/;"	m	class:strongloop::agent::heapdiff::Key
callback_	src/strong-agent.h	/^  Callback const callback_;$/;"	m	class:strongloop::agent::WakeUp
check-imports.sh	src/check-imports.sh	1;"	F
compat	src/compat-inl.h	/^namespace compat {$/;"	n
compat	src/compat.h	/^namespace compat {$/;"	n
compat-inl.h	src/compat-inl.h	1;"	F
compat.h	src/compat.h	1;"	F
compat::AllStatic	src/compat.h	/^class AllStatic {$/;"	c	namespace:compat
compat::AllStatic::AllStatic	src/compat.h	/^  AllStatic();$/;"	p	class:compat::AllStatic
compat::ArgumentType	src/compat.h	/^typedef v8::Arguments ArgumentType;$/;"	t	namespace:compat
compat::Array	src/compat.h	/^struct Array : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::Array::New	src/compat-inl.h	/^v8::Local<v8::Array> Array::New(v8::Isolate* isolate, int length) {$/;"	f	class:compat::Array
compat::Array::New	src/compat.h	/^  inline static v8::Local<v8::Array> New(v8::Isolate* isolate, int length = 0);$/;"	p	struct:compat::Array
compat::Boolean	src/compat.h	/^struct Boolean : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::Boolean::New	src/compat-inl.h	/^v8::Local<v8::Boolean> Boolean::New(v8::Isolate* isolate, bool value) {$/;"	f	class:compat::Boolean
compat::Boolean::New	src/compat.h	/^  inline static v8::Local<v8::Boolean> New(v8::Isolate* isolate, bool value);$/;"	p	struct:compat::Boolean
compat::CpuProfiler	src/compat.h	/^struct CpuProfiler : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::CpuProfiler::StartCpuProfiling	src/compat-inl.h	/^void CpuProfiler::StartCpuProfiling(v8::Isolate* isolate,$/;"	f	class:compat::CpuProfiler
compat::CpuProfiler::StartCpuProfiling	src/compat.h	/^  static void StartCpuProfiling($/;"	p	struct:compat::CpuProfiler
compat::CpuProfiler::StopCpuProfiling	src/compat-inl.h	/^const v8::CpuProfile* CpuProfiler::StopCpuProfiling($/;"	f	class:compat::CpuProfiler
compat::CpuProfiler::StopCpuProfiling	src/compat.h	/^  static const v8::CpuProfile* StopCpuProfiling($/;"	p	struct:compat::CpuProfiler
compat::False	src/compat-inl.h	/^v8::Local<v8::Boolean> False(v8::Isolate* isolate) {$/;"	f	namespace:compat
compat::False	src/compat.h	/^inline v8::Local<v8::Boolean> False(v8::Isolate* isolate);$/;"	p	namespace:compat
compat::FunctionCallback	src/compat.h	/^typedef v8::InvocationCallback FunctionCallback;$/;"	t	namespace:compat
compat::FunctionTemplate	src/compat.h	/^struct FunctionTemplate : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::FunctionTemplate::New	src/compat-inl.h	/^v8::Local<v8::FunctionTemplate> FunctionTemplate::New($/;"	f	class:compat::FunctionTemplate
compat::FunctionTemplate::New	src/compat.h	/^  inline static v8::Local<v8::FunctionTemplate> New($/;"	p	struct:compat::FunctionTemplate
compat::HandleScope	src/compat.h	/^class HandleScope {$/;"	c	namespace:compat
compat::HandleScope::HandleScope	src/compat-inl.h	/^HandleScope::HandleScope(v8::Isolate* isolate) : handle_scope_(isolate) {}$/;"	f	class:compat::HandleScope
compat::HandleScope::HandleScope	src/compat-inl.h	/^HandleScope::HandleScope(v8::Isolate*) {}$/;"	f	class:compat::HandleScope
compat::HandleScope::HandleScope	src/compat.h	/^  inline explicit HandleScope(v8::Isolate* isolate);$/;"	p	class:compat::HandleScope
compat::HandleScope::handle_scope_	src/compat.h	/^  v8::HandleScope handle_scope_;$/;"	m	class:compat::HandleScope
compat::HeapProfiler	src/compat.h	/^struct HeapProfiler : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::HeapProfiler::DeleteAllHeapSnapshots	src/compat-inl.h	/^void HeapProfiler::DeleteAllHeapSnapshots(v8::Isolate* isolate) {$/;"	f	class:compat::HeapProfiler
compat::HeapProfiler::DeleteAllHeapSnapshots	src/compat.h	/^  inline static void DeleteAllHeapSnapshots(v8::Isolate* isolate);$/;"	p	struct:compat::HeapProfiler
compat::HeapProfiler::TakeHeapSnapshot	src/compat-inl.h	/^const v8::HeapSnapshot* HeapProfiler::TakeHeapSnapshot($/;"	f	class:compat::HeapProfiler
compat::HeapProfiler::TakeHeapSnapshot	src/compat.h	/^  inline static const v8::HeapSnapshot* TakeHeapSnapshot($/;"	p	struct:compat::HeapProfiler
compat::I	src/compat-inl.h	/^namespace I {$/;"	n	namespace:compat
compat::I::AT_LEAST_V8_3_29	src/compat-inl.h	/^static const bool AT_LEAST_V8_3_29 =$/;"	m	namespace:compat::I
compat::I::HasGetConstructorMethod	src/compat-inl.h	/^class HasGetConstructorMethod {$/;"	c	namespace:compat::I
compat::I::HasGetConstructorMethod::M	src/compat-inl.h	/^  template <typename U> static int16_t M(int (*)[sizeof(&U::GetConstructor)]);$/;"	p	class:compat::I::HasGetConstructorMethod
compat::I::HasGetConstructorMethod::M	src/compat-inl.h	/^  template <typename U> static int32_t M(...);$/;"	p	class:compat::I::HasGetConstructorMethod
compat::I::HasGetConstructorMethod::value	src/compat-inl.h	/^  static const bool value = (sizeof(M<T>(0)) == sizeof(int16_t));$/;"	m	class:compat::I::HasGetConstructorMethod
compat::I::SetAddHistogramSampleFunction	src/compat-inl.h	/^void SetAddHistogramSampleFunction(U* isolate,$/;"	f	namespace:compat::I
compat::I::SetAddHistogramSampleFunction	src/compat-inl.h	/^void SetAddHistogramSampleFunction(U*, v8::AddHistogramSampleCallback callback,$/;"	f	namespace:compat::I
compat::I::SetCreateHistogramFunction	src/compat-inl.h	/^void SetCreateHistogramFunction(U* isolate,$/;"	f	namespace:compat::I
compat::I::SetCreateHistogramFunction	src/compat-inl.h	/^void SetCreateHistogramFunction(U*, v8::CreateHistogramCallback callback,$/;"	f	namespace:compat::I
compat::I::ToLocal	src/compat-inl.h	/^inline v8::Local<T> ToLocal(v8::Handle<T> handle) {$/;"	f	namespace:compat::I
compat::I::ToLocal	src/compat-inl.h	/^inline v8::Local<T> ToLocal(v8::Local<T> handle) {$/;"	f	namespace:compat::I
compat::I::Use	src/compat-inl.h	/^inline void Use(const T&) {}$/;"	f	namespace:compat::I
compat::Integer	src/compat.h	/^struct Integer : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::Integer::New	src/compat-inl.h	/^v8::Local<v8::Integer> Integer::New(v8::Isolate* isolate, int32_t value) {$/;"	f	class:compat::Integer
compat::Integer::New	src/compat.h	/^  inline static v8::Local<v8::Integer> New(v8::Isolate* isolate, int32_t value);$/;"	p	struct:compat::Integer
compat::Integer::NewFromUnsigned	src/compat-inl.h	/^v8::Local<v8::Integer> Integer::NewFromUnsigned(v8::Isolate* isolate,$/;"	f	class:compat::Integer
compat::Integer::NewFromUnsigned	src/compat.h	/^  inline static v8::Local<v8::Integer> NewFromUnsigned(v8::Isolate* isolate,$/;"	p	struct:compat::Integer
compat::Isolate	src/compat.h	/^struct Isolate : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::Isolate::GetHeapStatistics	src/compat-inl.h	/^void Isolate::GetHeapStatistics(v8::Isolate* isolate,$/;"	f	class:compat::Isolate
compat::Isolate::GetHeapStatistics	src/compat.h	/^  inline static void GetHeapStatistics(v8::Isolate* isolate,$/;"	p	struct:compat::Isolate
compat::Isolate::SetAddHistogramSampleFunction	src/compat-inl.h	/^void Isolate::SetAddHistogramSampleFunction($/;"	f	class:compat::Isolate
compat::Isolate::SetAddHistogramSampleFunction	src/compat.h	/^  inline static void SetAddHistogramSampleFunction($/;"	p	struct:compat::Isolate
compat::Isolate::SetCreateHistogramFunction	src/compat-inl.h	/^void Isolate::SetCreateHistogramFunction(v8::Isolate* isolate,$/;"	f	class:compat::Isolate
compat::Isolate::SetCreateHistogramFunction	src/compat.h	/^  inline static void SetCreateHistogramFunction($/;"	p	struct:compat::Isolate
compat::Isolate::ThrowException	src/compat-inl.h	/^v8::Local<v8::Value> Isolate::ThrowException(v8::Isolate* isolate,$/;"	f	class:compat::Isolate
compat::Isolate::ThrowException	src/compat.h	/^  inline static v8::Local<v8::Value> ThrowException($/;"	p	struct:compat::Isolate
compat::Null	src/compat-inl.h	/^v8::Local<v8::Primitive> Null(v8::Isolate* isolate) {$/;"	f	namespace:compat
compat::Null	src/compat.h	/^inline v8::Local<v8::Primitive> Null(v8::Isolate* isolate);$/;"	p	namespace:compat
compat::Number	src/compat.h	/^struct Number : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::Number::New	src/compat-inl.h	/^v8::Local<v8::Number> Number::New(v8::Isolate* isolate, double value) {$/;"	f	class:compat::Number
compat::Number::New	src/compat.h	/^  inline static v8::Local<v8::Number> New(v8::Isolate* isolate, double value);$/;"	p	struct:compat::Number
compat::Object	src/compat.h	/^struct Object : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::Object::New	src/compat-inl.h	/^v8::Local<v8::Object> Object::New(v8::Isolate* isolate) {$/;"	f	class:compat::Object
compat::Object::New	src/compat.h	/^  inline static v8::Local<v8::Object> New(v8::Isolate* isolate);$/;"	p	struct:compat::Object
compat::Persistent	src/compat.h	/^class Persistent {$/;"	c	namespace:compat
compat::Persistent::IsEmpty	src/compat-inl.h	/^bool Persistent<T>::IsEmpty() const {$/;"	f	class:compat::Persistent
compat::Persistent::IsEmpty	src/compat.h	/^  inline bool IsEmpty() const;$/;"	p	class:compat::Persistent
compat::Persistent::Reset	src/compat-inl.h	/^void Persistent<T>::Reset() {$/;"	f	class:compat::Persistent
compat::Persistent::Reset	src/compat-inl.h	/^void Persistent<T>::Reset(v8::Isolate* isolate, v8::Local<T> value) {$/;"	f	class:compat::Persistent
compat::Persistent::Reset	src/compat-inl.h	/^void Persistent<T>::Reset(v8::Isolate*, v8::Local<T> value) {$/;"	f	class:compat::Persistent
compat::Persistent::Reset	src/compat.h	/^  inline void Reset();$/;"	p	class:compat::Persistent
compat::Persistent::Reset	src/compat.h	/^  inline void Reset(v8::Isolate* isolate, v8::Local<T> value);$/;"	p	class:compat::Persistent
compat::Persistent::ToLocal	src/compat-inl.h	/^v8::Local<T> Persistent<T>::ToLocal(v8::Isolate* isolate) const {$/;"	f	class:compat::Persistent
compat::Persistent::ToLocal	src/compat-inl.h	/^v8::Local<T> Persistent<T>::ToLocal(v8::Isolate*) const {$/;"	f	class:compat::Persistent
compat::Persistent::ToLocal	src/compat.h	/^  inline v8::Local<T> ToLocal(v8::Isolate* isolate) const;$/;"	p	class:compat::Persistent
compat::Persistent::handle_	src/compat.h	/^  v8::Persistent<T> handle_;$/;"	m	class:compat::Persistent
compat::ReturnType	src/compat.h	/^typedef v8::Handle<v8::Value> ReturnType;$/;"	t	namespace:compat
compat::ReturnableHandleScope	src/compat.h	/^class ReturnableHandleScope {$/;"	c	namespace:compat
compat::ReturnableHandleScope::Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return() { return v8::Undefined(); }$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return() {}$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(bool value) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(const char* value) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(double value) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(intptr_t value) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Return(v8::Local<v8::Value> value) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat.h	/^  inline ReturnType Return();$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat.h	/^  inline ReturnType Return(bool value);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat.h	/^  inline ReturnType Return(const char* value);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat.h	/^  inline ReturnType Return(double value);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat.h	/^  inline ReturnType Return(intptr_t value);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Return	src/compat.h	/^  inline ReturnType Return(v8::Local<v8::Value> value);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ReturnableHandleScope	src/compat-inl.h	/^ReturnableHandleScope::ReturnableHandleScope(const ArgumentType& args)$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ReturnableHandleScope	src/compat.h	/^  inline explicit ReturnableHandleScope(const ArgumentType& args);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Throw	src/compat-inl.h	/^ReturnType ReturnableHandleScope::Throw(v8::Local<v8::Value> exception) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::Throw	src/compat.h	/^  inline ReturnType Throw(v8::Local<v8::Value> exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowError(v8::Local<v8::String> exception) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowError	src/compat.h	/^  inline ReturnType ThrowError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowError	src/compat.h	/^  inline ReturnType ThrowError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowRangeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowRangeError($/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowRangeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowRangeError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowRangeError	src/compat.h	/^  inline ReturnType ThrowRangeError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowRangeError	src/compat.h	/^  inline ReturnType ThrowRangeError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowReferenceError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowReferenceError($/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowReferenceError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowReferenceError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowReferenceError	src/compat.h	/^  inline ReturnType ThrowReferenceError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowReferenceError	src/compat.h	/^  inline ReturnType ThrowReferenceError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowSyntaxError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowSyntaxError($/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowSyntaxError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowSyntaxError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowSyntaxError	src/compat.h	/^  inline ReturnType ThrowSyntaxError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowSyntaxError	src/compat.h	/^  inline ReturnType ThrowSyntaxError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowTypeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowTypeError($/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowTypeError	src/compat-inl.h	/^ReturnType ReturnableHandleScope::ThrowTypeError(const char* exception) {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowTypeError	src/compat.h	/^  inline ReturnType ThrowTypeError(const char* exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::ThrowTypeError	src/compat.h	/^  inline ReturnType ThrowTypeError(v8::Local<v8::String> exception);$/;"	p	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::args_	src/compat.h	/^  const ArgumentType& args_;$/;"	m	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::handle_scope_	src/compat.h	/^  v8::HandleScope handle_scope_;$/;"	m	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::isolate	src/compat-inl.h	/^v8::Isolate* ReturnableHandleScope::isolate() const {$/;"	f	class:compat::ReturnableHandleScope
compat::ReturnableHandleScope::isolate	src/compat.h	/^  inline v8::Isolate* isolate() const;$/;"	p	class:compat::ReturnableHandleScope
compat::String	src/compat.h	/^struct String : public AllStatic {$/;"	s	namespace:compat	inherits:AllStatic
compat::String::NewFromUtf8	src/compat-inl.h	/^v8::Local<v8::String> String::NewFromUtf8(v8::Isolate* isolate,$/;"	f	class:compat::String
compat::String::NewFromUtf8	src/compat.h	/^  inline static v8::Local<v8::String> NewFromUtf8($/;"	p	struct:compat::String
compat::String::NewStringType	src/compat.h	/^  enum NewStringType {$/;"	g	struct:compat::String
compat::String::kInternalizedString	src/compat.h	/^    kInternalizedString,$/;"	e	enum:compat::String::NewStringType
compat::String::kNormalString	src/compat.h	/^    kNormalString,$/;"	e	enum:compat::String::NewStringType
compat::String::kUndetectableString	src/compat.h	/^    kUndetectableString$/;"	e	enum:compat::String::NewStringType
compat::True	src/compat-inl.h	/^v8::Local<v8::Boolean> True(v8::Isolate* isolate) {$/;"	f	namespace:compat
compat::True	src/compat.h	/^inline v8::Local<v8::Boolean> True(v8::Isolate* isolate);$/;"	p	namespace:compat
compat::Undefined	src/compat-inl.h	/^v8::Local<v8::Primitive> Undefined(v8::Isolate* isolate) {$/;"	f	namespace:compat
compat::Undefined	src/compat.h	/^inline v8::Local<v8::Primitive> Undefined(v8::Isolate* isolate);$/;"	p	namespace:compat
count	src/heapdiff.h	/^  int count() const;$/;"	p	class:strongloop::agent::heapdiff::Score
count	src/heapdiff.h	/^int Score::count() const { return count_; }$/;"	f	class:strongloop::agent::heapdiff::Score
count_	src/heapdiff.h	/^  int count_;$/;"	m	class:strongloop::agent::heapdiff::Score
counters	src/counters.h	/^namespace counters {$/;"	n	namespace:strongloop::agent
counters	src/strong-agent.h	/^namespace counters {$/;"	n	namespace:strongloop::agent
counters.h	src/counters.h	1;"	F
cpplint.py	src/cpplint.py	1;"	F
data	src/heapdiff.h	/^  const uint16_t* data() const;$/;"	p	class:strongloop::agent::heapdiff::Key
data	src/heapdiff.h	/^const uint16_t* Key::data() const { return data_; }$/;"	f	class:strongloop::agent::heapdiff::Key
data_	src/heapdiff.h	/^  mutable uint16_t* data_;$/;"	m	class:strongloop::agent::heapdiff::Key
dyninst	src/dyninst.h	/^namespace dyninst {$/;"	n	namespace:strongloop::agent
dyninst	src/strong-agent.h	/^namespace dyninst {$/;"	n	namespace:strongloop::agent
dyninst.h	src/dyninst.h	1;"	F
extras	src/extras.h	/^namespace extras {$/;"	n	namespace:strongloop::agent
extras	src/strong-agent.h	/^namespace extras {$/;"	n	namespace:strongloop::agent
extras.h	src/extras.h	1;"	F
features.h	src/features.h	1;"	F
gcinfo	src/gcinfo.h	/^namespace gcinfo {$/;"	n	namespace:strongloop::agent
gcinfo	src/strong-agent.h	/^namespace gcinfo {$/;"	n	namespace:strongloop::agent
gcinfo.h	src/gcinfo.h	1;"	F
handle	src/heapdiff.h	/^  Handle<String> handle() const;$/;"	p	class:strongloop::agent::heapdiff::Key
handle	src/heapdiff.h	/^Handle<String> Key::handle() const { return handle_; }$/;"	f	class:strongloop::agent::heapdiff::Key
handle_	src/compat.h	/^  v8::Persistent<T> handle_;$/;"	m	class:compat::Persistent
handle_	src/heapdiff.h	/^  Handle<String> handle_;$/;"	m	class:strongloop::agent::heapdiff::Key
handle_scope_	src/compat.h	/^  v8::HandleScope handle_scope_;$/;"	m	class:compat::HandleScope
handle_scope_	src/compat.h	/^  v8::HandleScope handle_scope_;$/;"	m	class:compat::ReturnableHandleScope
hash	src/heapdiff.h	/^  uint32_t hash() const;$/;"	p	class:strongloop::agent::heapdiff::Key
hash	src/heapdiff.h	/^uint32_t Key::hash() const { return hash_; }$/;"	f	class:strongloop::agent::heapdiff::Key
hash_	src/heapdiff.h	/^  mutable uint32_t hash_;$/;"	m	class:strongloop::agent::heapdiff::Key
heapdiff	src/heapdiff.h	/^namespace heapdiff {$/;"	n	namespace:strongloop::agent
heapdiff	src/strong-agent.h	/^namespace heapdiff {$/;"	n	namespace:strongloop::agent
heapdiff.h	src/heapdiff.h	1;"	F
id	src/heapdiff.h	/^  SnapshotObjectId id() const;$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
id	src/heapdiff.h	/^SnapshotObjectId HeapGraphNodeWrap::id() const { return id_; }$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
id_	src/heapdiff.h	/^  SnapshotObjectId id_;$/;"	m	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
idle_handle	src/strong-agent.cc	/^::uv_idle_t WakeUp::idle_handle;$/;"	m	class:strongloop::agent::WakeUp	file:
idle_handle	src/strong-agent.h	/^  static ::uv_idle_t idle_handle;$/;"	m	class:strongloop::agent::WakeUp
initialized	src/util-inl.h	/^bool Lazy<T>::initialized() const {$/;"	f	class:strongloop::agent::Lazy
initialized	src/util.h	/^  inline bool initialized() const;$/;"	p	class:strongloop::agent::Lazy
initialized_	src/util.h	/^  bool initialized_;$/;"	m	class:strongloop::agent::Lazy
internal	src/platform-win32.h	/^namespace internal {$/;"	n	namespace:strongloop::agent::platform
isolate	src/compat-inl.h	/^v8::Isolate* ReturnableHandleScope::isolate() const {$/;"	f	class:compat::ReturnableHandleScope
isolate	src/compat.h	/^  inline v8::Isolate* isolate() const;$/;"	p	class:compat::ReturnableHandleScope
kInternalizedString	src/compat.h	/^    kInternalizedString,$/;"	e	enum:compat::String::NewStringType
kMaxIndexedProperties	src/strong-agent.h	/^  SL_INDEXED_PROPERTIES_MAP(V) kMaxIndexedProperties$/;"	e	enum:strongloop::agent::IndexedProperties
kMaxKind	src/counters.h	/^enum Kind { ALL_METRICS_LIST(V) kMaxKind };$/;"	e	enum:strongloop::agent::counters::Kind
kMaxNameSize	src/heapdiff.h	/^  static const unsigned kMaxNameSize = 1024;$/;"	m	class:strongloop::agent::heapdiff::Key
kNormalString	src/compat.h	/^    kNormalString,$/;"	e	enum:compat::String::NewStringType
kResumeSignal	src/watchdog.h	/^static const int kResumeSignal = SIGRTMAX - 1;$/;"	m	namespace:strongloop::agent::watchdog
kSuspendSignal	src/watchdog.h	/^static const int kSuspendSignal = SIGRTMAX - 2;$/;"	m	namespace:strongloop::agent::watchdog
kUndetectableString	src/compat.h	/^    kUndetectableString$/;"	e	enum:compat::String::NewStringType
main	src/cpplint.py	/^def main():$/;"	f
map_	src/heapdiff.h	/^  HeapGraphNodeMap* map_;$/;"	m	struct:strongloop::agent::heapdiff::SummarizeHelper
max	src/uvmon.h	/^uint32_t& max = statistics[1];$/;"	m	namespace:strongloop::agent::uvmon
min	src/uvmon.h	/^uint32_t& min = statistics[0];$/;"	m	namespace:strongloop::agent::uvmon
no_timeout	src/watchdog.h	/^const static itimerspec no_timeout;  \/\/ Non-const because non-default constructible.$/;"	m	namespace:strongloop::agent::watchdog
node	src/heapdiff.h	/^  const HeapGraphNode* node() const;$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
node	src/heapdiff.h	/^const HeapGraphNode* HeapGraphNodeWrap::node() const { return node_; }$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
node_	src/heapdiff.h	/^  const HeapGraphNode* node_;$/;"	m	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
num	src/uvmon.h	/^uint32_t& num = statistics[2];$/;"	m	namespace:strongloop::agent::uvmon
operator *	src/heapdiff.h	/^  SummarizeHelper& operator*() { return *this; }$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
operator *	src/util-inl.h	/^T& Lazy<T>::operator*() {$/;"	f	class:strongloop::agent::Lazy
operator *	src/util.h	/^  inline T& operator*();$/;"	p	class:strongloop::agent::Lazy
operator ++	src/heapdiff.h	/^  SummarizeHelper& operator++() { return *this; }$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
operator ++	src/heapdiff.h	/^  SummarizeHelper& operator++(int) { return *this; }$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
operator ->	src/util-inl.h	/^T* Lazy<T>::operator->() {$/;"	f	class:strongloop::agent::Lazy
operator ->	src/util.h	/^  inline T* operator->();$/;"	p	class:strongloop::agent::Lazy
operator <	src/heapdiff.h	/^  bool operator<(const HeapGraphNodeWrap& that) const;$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
operator <	src/heapdiff.h	/^  bool operator<(const Key& that) const;$/;"	p	class:strongloop::agent::heapdiff::Key
operator <	src/heapdiff.h	/^bool HeapGraphNodeWrap::operator<(const HeapGraphNodeWrap& that) const {$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
operator <	src/heapdiff.h	/^bool Key::operator<(const Key& that) const {$/;"	f	class:strongloop::agent::heapdiff::Key
operator <<	src/profiler.h	/^std::ostream& operator<<(std::ostream& os, Handle<String> string) {$/;"	f	namespace:strongloop::agent::profiler
operator =	src/heapdiff.h	/^  void operator=(const HeapGraphNodeWrap& wrap) {$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
operator =	src/heapdiff.h	/^  void operator=(const Key&);$/;"	p	class:strongloop::agent::heapdiff::Key
operator =	src/strong-agent.h	/^  void operator=(const WakeUp&);$/;"	p	class:strongloop::agent::WakeUp
pending_queue	src/strong-agent.cc	/^::QUEUE WakeUp::pending_queue;$/;"	m	class:strongloop::agent::WakeUp	file:
pending_queue	src/strong-agent.h	/^  static ::QUEUE pending_queue;$/;"	m	class:strongloop::agent::WakeUp
platform	src/platform-posix.h	/^namespace platform {$/;"	n	namespace:strongloop::agent
platform	src/platform-win32.h	/^namespace platform {$/;"	n	namespace:strongloop::agent
platform	src/strong-agent.h	/^namespace platform {$/;"	n	namespace:strongloop::agent
platform-posix.h	src/platform-posix.h	1;"	F
platform-win32.h	src/platform-win32.h	1;"	F
profiler	src/profiler.h	/^namespace profiler {$/;"	n	namespace:strongloop::agent
profiler	src/strong-agent.h	/^namespace profiler {$/;"	n	namespace:strongloop::agent
profiler.h	src/profiler.h	1;"	F
profiler_tid	src/watchdog.h	/^static __thread pid_t profiler_tid;$/;"	m	namespace:strongloop::agent::watchdog
queue.h	src/queue.h	1;"	F
queue_	src/strong-agent.h	/^  ::QUEUE queue_;$/;"	m	class:strongloop::agent::WakeUp
samples	src/counters.h	/^static std::vector<int32_t> samples;$/;"	m	namespace:strongloop::agent::counters
samples	src/gcinfo.h	/^static std::vector<size_t> samples;$/;"	m	namespace:strongloop::agent::gcinfo
size	src/heapdiff.h	/^  int size() const;$/;"	p	class:strongloop::agent::heapdiff::Score
size	src/heapdiff.h	/^  unsigned size() const;$/;"	p	class:strongloop::agent::heapdiff::Key
size	src/heapdiff.h	/^int Score::size() const { return size_; }$/;"	f	class:strongloop::agent::heapdiff::Score
size	src/heapdiff.h	/^unsigned Key::size() const { return size_; }$/;"	f	class:strongloop::agent::heapdiff::Key
size_	src/heapdiff.h	/^  int size_;$/;"	m	class:strongloop::agent::heapdiff::Score
size_	src/heapdiff.h	/^  mutable unsigned size_;$/;"	m	class:strongloop::agent::heapdiff::Key
start_snapshot	src/heapdiff.h	/^const HeapSnapshot* start_snapshot;$/;"	m	namespace:strongloop::agent::heapdiff
statistics	src/uvmon.h	/^uint32_t statistics[4];$/;"	m	namespace:strongloop::agent::uvmon
storage_	src/util.h	/^  char storage_[sizeof(T)];$/;"	m	class:strongloop::agent::Lazy
strong-agent.cc	src/strong-agent.cc	1;"	F
strong-agent.h	src/strong-agent.h	1;"	F
strongloop	src/counters.h	/^namespace strongloop {$/;"	n
strongloop	src/dyninst.h	/^namespace strongloop {$/;"	n
strongloop	src/extras.h	/^namespace strongloop {$/;"	n
strongloop	src/gcinfo.h	/^namespace strongloop {$/;"	n
strongloop	src/heapdiff.h	/^namespace strongloop {$/;"	n
strongloop	src/platform-posix.h	/^namespace strongloop {$/;"	n
strongloop	src/platform-win32.h	/^namespace strongloop {$/;"	n
strongloop	src/profiler.h	/^namespace strongloop {$/;"	n
strongloop	src/strong-agent.cc	/^namespace strongloop {$/;"	n	file:
strongloop	src/strong-agent.h	/^namespace strongloop {$/;"	n
strongloop	src/util-inl.h	/^namespace strongloop {$/;"	n
strongloop	src/util.h	/^namespace strongloop {$/;"	n
strongloop	src/uvmon.h	/^namespace strongloop {$/;"	n
strongloop	src/watchdog.h	/^namespace strongloop {$/;"	n
strongloop::agent	src/counters.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/dyninst.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/extras.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/gcinfo.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/heapdiff.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/platform-posix.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/platform-win32.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/profiler.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/strong-agent.cc	/^namespace agent {$/;"	n	namespace:strongloop	file:
strongloop::agent	src/strong-agent.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/util-inl.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/util.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/uvmon.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent	src/watchdog.h	/^namespace agent {$/;"	n	namespace:strongloop
strongloop::agent::Assert	src/util-inl.h	/^void Assert(const T& result, const char* expression) {$/;"	f	namespace:strongloop::agent
strongloop::agent::Assert	src/util.h	/^void Assert(const T& result, const char* expression);$/;"	p	namespace:strongloop::agent
strongloop::agent::Check	src/util-inl.h	/^void Check(const T& result, const char* expression) {$/;"	f	namespace:strongloop::agent
strongloop::agent::Check	src/util.h	/^void Check(const T& result, const char* expression);$/;"	p	namespace:strongloop::agent
strongloop::agent::Compare	src/util-inl.h	/^int Compare(const T* a, const T* b, size_t size) {$/;"	f	namespace:strongloop::agent
strongloop::agent::Compare	src/util.h	/^int Compare(const T* a, const T* b, size_t size);$/;"	p	namespace:strongloop::agent
strongloop::agent::Copy	src/util-inl.h	/^T* Copy(T* to, const T* from, size_t size) {$/;"	f	namespace:strongloop::agent
strongloop::agent::Copy	src/util.h	/^T* Copy(T* to, const T* from, size_t size);$/;"	p	namespace:strongloop::agent
strongloop::agent::GetBindingObject	src/strong-agent.cc	/^Local<Object> GetBindingObject(Isolate* isolate) {$/;"	f	namespace:strongloop::agent
strongloop::agent::GetBindingObject	src/strong-agent.h	/^inline v8::Local<v8::Object> GetBindingObject(v8::Isolate* isolate);$/;"	p	namespace:strongloop::agent
strongloop::agent::IndexedProperties	src/strong-agent.h	/^enum IndexedProperties {$/;"	g	namespace:strongloop::agent
strongloop::agent::Initialize	src/strong-agent.cc	/^void Initialize(Local<Object> binding) {$/;"	f	namespace:strongloop::agent
strongloop::agent::Lazy	src/util.h	/^class Lazy {$/;"	c	namespace:strongloop::agent
strongloop::agent::Lazy::Dispose	src/util-inl.h	/^void Lazy<T>::Dispose() {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Dispose	src/util.h	/^  inline void Dispose();$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util-inl.h	/^void Lazy<T>::Initialize() {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util-inl.h	/^void Lazy<T>::Initialize(A a) {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util-inl.h	/^void Lazy<T>::Initialize(A a, B b) {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util-inl.h	/^void Lazy<T>::Initialize(A a, B b, C c) {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util.h	/^  inline void Initialize();$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util.h	/^  inline void Initialize(A);$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util.h	/^  inline void Initialize(A, B);$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Initialize	src/util.h	/^  inline void Initialize(A, B, C);$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Lazy	src/util-inl.h	/^Lazy<T>::Lazy()$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::Lazy	src/util.h	/^  inline Lazy();$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::address	src/util-inl.h	/^T* Lazy<T>::address() {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::address	src/util.h	/^  inline T* address();$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::initialized	src/util-inl.h	/^bool Lazy<T>::initialized() const {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::initialized	src/util.h	/^  inline bool initialized() const;$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::initialized_	src/util.h	/^  bool initialized_;$/;"	m	class:strongloop::agent::Lazy
strongloop::agent::Lazy::operator *	src/util-inl.h	/^T& Lazy<T>::operator*() {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::operator *	src/util.h	/^  inline T& operator*();$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::operator ->	src/util-inl.h	/^T* Lazy<T>::operator->() {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::operator ->	src/util.h	/^  inline T* operator->();$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::Lazy::storage_	src/util.h	/^  char storage_[sizeof(T)];$/;"	m	class:strongloop::agent::Lazy
strongloop::agent::Lazy::~Lazy	src/util-inl.h	/^Lazy<T>::~Lazy() {$/;"	f	class:strongloop::agent::Lazy
strongloop::agent::Lazy::~Lazy	src/util.h	/^  inline ~Lazy();$/;"	p	class:strongloop::agent::Lazy
strongloop::agent::SL_INDEXED_PROPERTIES_MAP	src/strong-agent.h	/^  SL_INDEXED_PROPERTIES_MAP(V) kMaxIndexedProperties$/;"	e	enum:strongloop::agent::IndexedProperties
strongloop::agent::T	src/util.h	/^size_t ArraySize(const T(&a)[N]);$/;"	m	namespace:strongloop::agent
strongloop::agent::Use	src/util-inl.h	/^void Use(const T&) {}$/;"	f	namespace:strongloop::agent
strongloop::agent::Use	src/util.h	/^void Use(const T&);$/;"	p	namespace:strongloop::agent
strongloop::agent::WakeUp	src/strong-agent.h	/^class WakeUp {$/;"	c	namespace:strongloop::agent
strongloop::agent::WakeUp::Callback	src/strong-agent.h	/^  typedef void (*Callback)(WakeUp* w);$/;"	t	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::Initialize	src/strong-agent.cc	/^void WakeUp::Initialize() {$/;"	f	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::Initialize	src/strong-agent.h	/^  inline static void Initialize();$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::OnIdle	src/strong-agent.cc	/^void WakeUp::OnIdle(::uv_idle_t*) {$/;"	f	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::OnIdle	src/strong-agent.h	/^  inline static void OnIdle(::uv_idle_t*);$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::Start	src/strong-agent.cc	/^bool WakeUp::Start() {$/;"	f	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::Start	src/strong-agent.h	/^  inline bool Start();$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::Stop	src/strong-agent.cc	/^bool WakeUp::Stop() {$/;"	f	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::Stop	src/strong-agent.h	/^  inline bool Stop();$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::WakeUp	src/strong-agent.cc	/^WakeUp::WakeUp(Callback callback) : callback_(callback) { QUEUE_INIT(&queue_); }$/;"	f	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::WakeUp	src/strong-agent.h	/^  WakeUp(const WakeUp&);$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::WakeUp	src/strong-agent.h	/^  inline explicit WakeUp(Callback callback);$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::callback_	src/strong-agent.h	/^  Callback const callback_;$/;"	m	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::idle_handle	src/strong-agent.cc	/^::uv_idle_t WakeUp::idle_handle;$/;"	m	class:strongloop::agent::WakeUp	file:
strongloop::agent::WakeUp::idle_handle	src/strong-agent.h	/^  static ::uv_idle_t idle_handle;$/;"	m	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::operator =	src/strong-agent.h	/^  void operator=(const WakeUp&);$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::pending_queue	src/strong-agent.cc	/^::QUEUE WakeUp::pending_queue;$/;"	m	class:strongloop::agent::WakeUp	file:
strongloop::agent::WakeUp::pending_queue	src/strong-agent.h	/^  static ::QUEUE pending_queue;$/;"	m	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::queue_	src/strong-agent.h	/^  ::QUEUE queue_;$/;"	m	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::~WakeUp	src/strong-agent.cc	/^WakeUp::~WakeUp() { QUEUE_REMOVE(&queue_); }$/;"	f	class:strongloop::agent::WakeUp
strongloop::agent::WakeUp::~WakeUp	src/strong-agent.h	/^  inline ~WakeUp();$/;"	p	class:strongloop::agent::WakeUp
strongloop::agent::binding_object	src/strong-agent.cc	/^static C::Persistent<Object> binding_object;$/;"	m	namespace:strongloop::agent	file:
strongloop::agent::counters	src/counters.h	/^namespace counters {$/;"	n	namespace:strongloop::agent
strongloop::agent::counters	src/strong-agent.h	/^namespace counters {$/;"	n	namespace:strongloop::agent
strongloop::agent::counters::ALL_METRICS_LIST	src/counters.h	/^enum Kind { ALL_METRICS_LIST(V) kMaxKind };$/;"	e	enum:strongloop::agent::counters::Kind
strongloop::agent::counters::AddHistogramSampleFunction	src/counters.h	/^inline void AddHistogramSampleFunction(void* histogram, int sample) {$/;"	f	namespace:strongloop::agent::counters
strongloop::agent::counters::CreateHistogramFunction	src/counters.h	/^inline void* CreateHistogramFunction(const char* name, int \/* min *\/,$/;"	f	namespace:strongloop::agent::counters
strongloop::agent::counters::Initialize	src/counters.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::counters
strongloop::agent::counters::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::counters
strongloop::agent::counters::Kind	src/counters.h	/^enum Kind { ALL_METRICS_LIST(V) kMaxKind };$/;"	g	namespace:strongloop::agent::counters
strongloop::agent::counters::OnWakeUp	src/counters.h	/^inline void OnWakeUp(WakeUp*) {  \/\/ NOLINT(readability\/function)$/;"	f	namespace:strongloop::agent::counters
strongloop::agent::counters::ResetSamples	src/counters.h	/^inline void ResetSamples() {$/;"	f	namespace:strongloop::agent::counters
strongloop::agent::counters::StartCounters	src/counters.h	/^C::ReturnType StartCounters(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::counters
strongloop::agent::counters::StopCounters	src/counters.h	/^C::ReturnType StopCounters(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::counters
strongloop::agent::counters::kMaxKind	src/counters.h	/^enum Kind { ALL_METRICS_LIST(V) kMaxKind };$/;"	e	enum:strongloop::agent::counters::Kind
strongloop::agent::counters::samples	src/counters.h	/^static std::vector<int32_t> samples;$/;"	m	namespace:strongloop::agent::counters
strongloop::agent::counters::wakeup	src/counters.h	/^static Lazy<WakeUp> wakeup;$/;"	m	namespace:strongloop::agent::counters
strongloop::agent::dyninst	src/dyninst.h	/^namespace dyninst {$/;"	n	namespace:strongloop::agent
strongloop::agent::dyninst	src/strong-agent.h	/^namespace dyninst {$/;"	n	namespace:strongloop::agent
strongloop::agent::dyninst::Initialize	src/dyninst.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::dyninst
strongloop::agent::dyninst::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::dyninst
strongloop::agent::dyninst::RunInDebugContext	src/dyninst.h	/^C::ReturnType RunInDebugContext(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::dyninst
strongloop::agent::extras	src/extras.h	/^namespace extras {$/;"	n	namespace:strongloop::agent
strongloop::agent::extras	src/strong-agent.h	/^namespace extras {$/;"	n	namespace:strongloop::agent
strongloop::agent::extras::CpuTime	src/extras.h	/^C::ReturnType CpuTime(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::extras
strongloop::agent::extras::Initialize	src/extras.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::extras
strongloop::agent::extras::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::extras
strongloop::agent::gcinfo	src/gcinfo.h	/^namespace gcinfo {$/;"	n	namespace:strongloop::agent
strongloop::agent::gcinfo	src/strong-agent.h	/^namespace gcinfo {$/;"	n	namespace:strongloop::agent
strongloop::agent::gcinfo::AfterGC	src/gcinfo.h	/^void AfterGC(GCType, GCCallbackFlags) {$/;"	f	namespace:strongloop::agent::gcinfo
strongloop::agent::gcinfo::Initialize	src/gcinfo.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::gcinfo
strongloop::agent::gcinfo::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::gcinfo
strongloop::agent::gcinfo::OnWakeUp	src/gcinfo.h	/^inline void OnWakeUp(WakeUp*) {  \/\/ NOLINT(readability\/function)$/;"	f	namespace:strongloop::agent::gcinfo
strongloop::agent::gcinfo::StartGarbageCollectorStatistics	src/gcinfo.h	/^C::ReturnType StartGarbageCollectorStatistics(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::gcinfo
strongloop::agent::gcinfo::StopGarbageCollectorStatistics	src/gcinfo.h	/^C::ReturnType StopGarbageCollectorStatistics(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::gcinfo
strongloop::agent::gcinfo::samples	src/gcinfo.h	/^static std::vector<size_t> samples;$/;"	m	namespace:strongloop::agent::gcinfo
strongloop::agent::gcinfo::wakeup	src/gcinfo.h	/^static Lazy<WakeUp> wakeup;$/;"	m	namespace:strongloop::agent::gcinfo
strongloop::agent::heapdiff	src/heapdiff.h	/^namespace heapdiff {$/;"	n	namespace:strongloop::agent
strongloop::agent::heapdiff	src/strong-agent.h	/^namespace heapdiff {$/;"	n	namespace:strongloop::agent
strongloop::agent::heapdiff::AddHeapGraphNodeToSet	src/heapdiff.h	/^void AddHeapGraphNodeToSet(const HeapGraphNode* node, HeapGraphNodeSet* set) {$/;"	f	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::AddHeapGraphNodeToSet	src/heapdiff.h	/^void AddHeapGraphNodeToSet(const HeapGraphNode* node, HeapGraphNodeSet* set);$/;"	p	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::HeapGraphNodeMap	src/heapdiff.h	/^typedef std::map<Key, Score> HeapGraphNodeMap;$/;"	t	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::HeapGraphNodeSet	src/heapdiff.h	/^typedef std::set<HeapGraphNodeWrap> HeapGraphNodeSet;$/;"	t	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::HeapGraphNodeVector	src/heapdiff.h	/^typedef std::vector<HeapGraphNodeWrap> HeapGraphNodeVector;$/;"	t	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::HeapGraphNodeWrap	src/heapdiff.h	/^class HeapGraphNodeWrap {$/;"	c	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::HeapGraphNodeWrap::HeapGraphNodeWrap	src/heapdiff.h	/^  explicit HeapGraphNodeWrap(const HeapGraphNode* node);$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::HeapGraphNodeWrap	src/heapdiff.h	/^HeapGraphNodeWrap::HeapGraphNodeWrap(const HeapGraphNode* node)$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::id	src/heapdiff.h	/^  SnapshotObjectId id() const;$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::id	src/heapdiff.h	/^SnapshotObjectId HeapGraphNodeWrap::id() const { return id_; }$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::id_	src/heapdiff.h	/^  SnapshotObjectId id_;$/;"	m	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::node	src/heapdiff.h	/^  const HeapGraphNode* node() const;$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::node	src/heapdiff.h	/^const HeapGraphNode* HeapGraphNodeWrap::node() const { return node_; }$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::node_	src/heapdiff.h	/^  const HeapGraphNode* node_;$/;"	m	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::operator <	src/heapdiff.h	/^  bool operator<(const HeapGraphNodeWrap& that) const;$/;"	p	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::HeapGraphNodeWrap::operator <	src/heapdiff.h	/^bool HeapGraphNodeWrap::operator<(const HeapGraphNodeWrap& that) const {$/;"	f	class:strongloop::agent::heapdiff::HeapGraphNodeWrap
strongloop::agent::heapdiff::Initialize	src/heapdiff.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::JenkinsHash	src/heapdiff.h	/^uint32_t JenkinsHash(const uint8_t* data, unsigned size) {$/;"	f	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::JenkinsHash	src/heapdiff.h	/^uint32_t JenkinsHash(const uint8_t* data, unsigned size);$/;"	p	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::Key	src/heapdiff.h	/^class Key {$/;"	c	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::Key::Key	src/heapdiff.h	/^  Key(const Key& that);$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::Key	src/heapdiff.h	/^  explicit Key(Handle<String> string);$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::Key	src/heapdiff.h	/^Key::Key(Handle<String> handle)$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::Key	src/heapdiff.h	/^Key::Key(const Key& that)$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::buffer_	src/heapdiff.h	/^  uint16_t buffer_[32];$/;"	m	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::data	src/heapdiff.h	/^  const uint16_t* data() const;$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::data	src/heapdiff.h	/^const uint16_t* Key::data() const { return data_; }$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::data_	src/heapdiff.h	/^  mutable uint16_t* data_;$/;"	m	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::handle	src/heapdiff.h	/^  Handle<String> handle() const;$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::handle	src/heapdiff.h	/^Handle<String> Key::handle() const { return handle_; }$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::handle_	src/heapdiff.h	/^  Handle<String> handle_;$/;"	m	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::hash	src/heapdiff.h	/^  uint32_t hash() const;$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::hash	src/heapdiff.h	/^uint32_t Key::hash() const { return hash_; }$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::hash_	src/heapdiff.h	/^  mutable uint32_t hash_;$/;"	m	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::kMaxNameSize	src/heapdiff.h	/^  static const unsigned kMaxNameSize = 1024;$/;"	m	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::operator <	src/heapdiff.h	/^  bool operator<(const Key& that) const;$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::operator <	src/heapdiff.h	/^bool Key::operator<(const Key& that) const {$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::operator =	src/heapdiff.h	/^  void operator=(const Key&);$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::size	src/heapdiff.h	/^  unsigned size() const;$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::size	src/heapdiff.h	/^unsigned Key::size() const { return size_; }$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::size_	src/heapdiff.h	/^  mutable unsigned size_;$/;"	m	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::~Key	src/heapdiff.h	/^  ~Key();$/;"	p	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Key::~Key	src/heapdiff.h	/^Key::~Key() {$/;"	f	class:strongloop::agent::heapdiff::Key
strongloop::agent::heapdiff::Score	src/heapdiff.h	/^class Score {$/;"	c	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::Score::Minus	src/heapdiff.h	/^  void Minus(const HeapGraphNodeWrap& wrapper);$/;"	p	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::Minus	src/heapdiff.h	/^void Score::Minus(const HeapGraphNodeWrap& wrap) {$/;"	f	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::Plus	src/heapdiff.h	/^  void Plus(const HeapGraphNodeWrap& wrapper);$/;"	p	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::Plus	src/heapdiff.h	/^void Score::Plus(const HeapGraphNodeWrap& wrap) {$/;"	f	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::Score	src/heapdiff.h	/^  Score();$/;"	p	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::Score	src/heapdiff.h	/^Score::Score() : count_(0), size_(0) {}$/;"	f	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::count	src/heapdiff.h	/^  int count() const;$/;"	p	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::count	src/heapdiff.h	/^int Score::count() const { return count_; }$/;"	f	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::count_	src/heapdiff.h	/^  int count_;$/;"	m	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::size	src/heapdiff.h	/^  int size() const;$/;"	p	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::size	src/heapdiff.h	/^int Score::size() const { return size_; }$/;"	f	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::Score::size_	src/heapdiff.h	/^  int size_;$/;"	m	class:strongloop::agent::heapdiff::Score
strongloop::agent::heapdiff::StartHeapDiff	src/heapdiff.h	/^C::ReturnType StartHeapDiff(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::StopHeapDiff	src/heapdiff.h	/^C::ReturnType StopHeapDiff(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::Summarize	src/heapdiff.h	/^Local<Object> Summarize(Isolate* isolate, const HeapSnapshot* start_snapshot,$/;"	f	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::Summarize	src/heapdiff.h	/^Local<Object> Summarize(Isolate* isolate, const HeapSnapshot* start_snapshot,$/;"	p	namespace:strongloop::agent::heapdiff
strongloop::agent::heapdiff::SummarizeHelper	src/heapdiff.h	/^struct SummarizeHelper : public std::iterator<std::output_iterator_tag, Score> {$/;"	s	namespace:strongloop::agent::heapdiff	inherits:std::iterator
strongloop::agent::heapdiff::SummarizeHelper::SummarizeHelper	src/heapdiff.h	/^  explicit SummarizeHelper(HeapGraphNodeMap* map) : map_(map) {}$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
strongloop::agent::heapdiff::SummarizeHelper::map_	src/heapdiff.h	/^  HeapGraphNodeMap* map_;$/;"	m	struct:strongloop::agent::heapdiff::SummarizeHelper
strongloop::agent::heapdiff::SummarizeHelper::operator *	src/heapdiff.h	/^  SummarizeHelper& operator*() { return *this; }$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
strongloop::agent::heapdiff::SummarizeHelper::operator ++	src/heapdiff.h	/^  SummarizeHelper& operator++() { return *this; }$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
strongloop::agent::heapdiff::SummarizeHelper::operator ++	src/heapdiff.h	/^  SummarizeHelper& operator++(int) { return *this; }$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
strongloop::agent::heapdiff::SummarizeHelper::operator =	src/heapdiff.h	/^  void operator=(const HeapGraphNodeWrap& wrap) {$/;"	f	struct:strongloop::agent::heapdiff::SummarizeHelper
strongloop::agent::heapdiff::start_snapshot	src/heapdiff.h	/^const HeapSnapshot* start_snapshot;$/;"	m	namespace:strongloop::agent::heapdiff
strongloop::agent::kMaxIndexedProperties	src/strong-agent.h	/^  SL_INDEXED_PROPERTIES_MAP(V) kMaxIndexedProperties$/;"	e	enum:strongloop::agent::IndexedProperties
strongloop::agent::platform	src/platform-posix.h	/^namespace platform {$/;"	n	namespace:strongloop::agent
strongloop::agent::platform	src/platform-win32.h	/^namespace platform {$/;"	n	namespace:strongloop::agent
strongloop::agent::platform	src/strong-agent.h	/^namespace platform {$/;"	n	namespace:strongloop::agent
strongloop::agent::platform::CpuTime	src/platform-posix.h	/^void CpuTime(double* total_system, double* total_user) {$/;"	f	namespace:strongloop::agent::platform
strongloop::agent::platform::CpuTime	src/platform-win32.h	/^void CpuTime(double* total_system, double* total_user) {$/;"	f	namespace:strongloop::agent::platform
strongloop::agent::platform::CpuTime	src/strong-agent.h	/^void CpuTime(double* total_system, double* total_user);$/;"	p	namespace:strongloop::agent::platform
strongloop::agent::platform::internal	src/platform-win32.h	/^namespace internal {$/;"	n	namespace:strongloop::agent::platform
strongloop::agent::platform::internal::FileTimeToFractionalSeconds	src/platform-win32.h	/^inline double FileTimeToFractionalSeconds(const FILETIME* time) {$/;"	f	namespace:strongloop::agent::platform::internal
strongloop::agent::profiler	src/profiler.h	/^namespace profiler {$/;"	n	namespace:strongloop::agent
strongloop::agent::profiler	src/strong-agent.h	/^namespace profiler {$/;"	n	namespace:strongloop::agent
strongloop::agent::profiler::EscapeJson	src/profiler.h	/^std::string EscapeJson(const char* string, size_t size, size_t start = 0) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::Initialize	src/profiler.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::profiler
strongloop::agent::profiler::MaybeEscapeJson	src/profiler.h	/^std::string MaybeEscapeJson(const char* string, size_t size) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::SerializeCpuProfile	src/profiler.h	/^void SerializeCpuProfile(const CpuProfile* profile, std::ostream* sink) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::SerializeCpuProfileNode	src/profiler.h	/^void SerializeCpuProfileNode(const CpuProfileNode* node, std::ostream* sink) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::StartCpuProfiling	src/profiler.h	/^C::ReturnType StartCpuProfiling(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::StopCpuProfiling	src/profiler.h	/^C::ReturnType StopCpuProfiling(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::StopCpuProfilingAndSerialize	src/profiler.h	/^C::ReturnType StopCpuProfilingAndSerialize(const C::ArgumentType& args) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::ToObject	src/profiler.h	/^Local<Object> ToObject(Isolate* isolate, const CpuProfileNode* node) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::profiler::operator <<	src/profiler.h	/^std::ostream& operator<<(std::ostream& os, Handle<String> string) {$/;"	f	namespace:strongloop::agent::profiler
strongloop::agent::uvmon	src/strong-agent.h	/^namespace uvmon {$/;"	n	namespace:strongloop::agent
strongloop::agent::uvmon	src/uvmon.h	/^namespace uvmon {$/;"	n	namespace:strongloop::agent
strongloop::agent::uvmon::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::uvmon
strongloop::agent::uvmon::Initialize	src/uvmon.h	/^void Initialize(Isolate* isolate, Local<Object> binding) {$/;"	f	namespace:strongloop::agent::uvmon
strongloop::agent::uvmon::OnCheck	src/uvmon.h	/^void OnCheck(uv_check_t* handle) {$/;"	f	namespace:strongloop::agent::uvmon
strongloop::agent::uvmon::max	src/uvmon.h	/^uint32_t& max = statistics[1];$/;"	m	namespace:strongloop::agent::uvmon
strongloop::agent::uvmon::min	src/uvmon.h	/^uint32_t& min = statistics[0];$/;"	m	namespace:strongloop::agent::uvmon
strongloop::agent::uvmon::num	src/uvmon.h	/^uint32_t& num = statistics[2];$/;"	m	namespace:strongloop::agent::uvmon
strongloop::agent::uvmon::statistics	src/uvmon.h	/^uint32_t statistics[4];$/;"	m	namespace:strongloop::agent::uvmon
strongloop::agent::uvmon::sum	src/uvmon.h	/^uint32_t& sum = statistics[3];$/;"	m	namespace:strongloop::agent::uvmon
strongloop::agent::watchdog	src/strong-agent.h	/^namespace watchdog {$/;"	n	namespace:strongloop::agent
strongloop::agent::watchdog	src/watchdog.h	/^namespace watchdog {$/;"	n	namespace:strongloop::agent
strongloop::agent::watchdog::FindProfilerTid	src/watchdog.h	/^inline pid_t FindProfilerTid() {$/;"	f	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::Initialize	src/strong-agent.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>);$/;"	p	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::Initialize	src/watchdog.h	/^void Initialize(v8::Isolate*, v8::Local<v8::Object>) {$/;"	f	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::OnSignal	src/watchdog.h	/^inline void OnSignal(int signo) {$/;"	f	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::PatchSyscall	src/watchdog.h	/^inline void PatchSyscall() {$/;"	f	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::StartCpuProfiling	src/strong-agent.h	/^void StartCpuProfiling(v8::Isolate* isolate, uint64_t timeout);$/;"	p	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::StartCpuProfiling	src/watchdog.h	/^void StartCpuProfiling(v8::Isolate* isolate, uint64_t timeout_in_ms) {$/;"	f	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::StopCpuProfiling	src/strong-agent.h	/^const v8::CpuProfile* StopCpuProfiling(v8::Isolate* isolate);$/;"	p	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::StopCpuProfiling	src/watchdog.h	/^const v8::CpuProfile* StopCpuProfiling(v8::Isolate* isolate) {$/;"	f	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::Syscall	src/watchdog.h	/^inline long Syscall(long nr, long a, long b, long c,  \/\/ NOLINT(runtime\/int)$/;"	f	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::kResumeSignal	src/watchdog.h	/^static const int kResumeSignal = SIGRTMAX - 1;$/;"	m	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::kSuspendSignal	src/watchdog.h	/^static const int kSuspendSignal = SIGRTMAX - 2;$/;"	m	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::no_timeout	src/watchdog.h	/^const static itimerspec no_timeout;  \/\/ Non-const because non-default constructible.$/;"	m	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::profiler_tid	src/watchdog.h	/^static __thread pid_t profiler_tid;$/;"	m	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::timeout	src/watchdog.h	/^static itimerspec timeout;$/;"	m	namespace:strongloop::agent::watchdog
strongloop::agent::watchdog::timer_id	src/watchdog.h	/^static timer_t timer_id;$/;"	m	namespace:strongloop::agent::watchdog
sum	src/uvmon.h	/^uint32_t& sum = statistics[3];$/;"	m	namespace:strongloop::agent::uvmon
threading_list	src/cpplint.py	/^threading_list = ($/;"	v
timeout	src/watchdog.h	/^static itimerspec timeout;$/;"	m	namespace:strongloop::agent::watchdog
timer_id	src/watchdog.h	/^static timer_t timer_id;$/;"	m	namespace:strongloop::agent::watchdog
util-inl.h	src/util-inl.h	1;"	F
util.h	src/util.h	1;"	F
uvmon	src/strong-agent.h	/^namespace uvmon {$/;"	n	namespace:strongloop::agent
uvmon	src/uvmon.h	/^namespace uvmon {$/;"	n	namespace:strongloop::agent
uvmon.h	src/uvmon.h	1;"	F
value	src/compat-inl.h	/^  static const bool value = (sizeof(M<T>(0)) == sizeof(int16_t));$/;"	m	class:compat::I::HasGetConstructorMethod
wakeup	src/counters.h	/^static Lazy<WakeUp> wakeup;$/;"	m	namespace:strongloop::agent::counters
wakeup	src/gcinfo.h	/^static Lazy<WakeUp> wakeup;$/;"	m	namespace:strongloop::agent::gcinfo
watchdog	src/strong-agent.h	/^namespace watchdog {$/;"	n	namespace:strongloop::agent
watchdog	src/watchdog.h	/^namespace watchdog {$/;"	n	namespace:strongloop::agent
watchdog.h	src/watchdog.h	1;"	F
~Key	src/heapdiff.h	/^  ~Key();$/;"	p	class:strongloop::agent::heapdiff::Key
~Key	src/heapdiff.h	/^Key::~Key() {$/;"	f	class:strongloop::agent::heapdiff::Key
~Lazy	src/util-inl.h	/^Lazy<T>::~Lazy() {$/;"	f	class:strongloop::agent::Lazy
~Lazy	src/util.h	/^  inline ~Lazy();$/;"	p	class:strongloop::agent::Lazy
~WakeUp	src/strong-agent.cc	/^WakeUp::~WakeUp() { QUEUE_REMOVE(&queue_); }$/;"	f	class:strongloop::agent::WakeUp
~WakeUp	src/strong-agent.h	/^  inline ~WakeUp();$/;"	p	class:strongloop::agent::WakeUp
