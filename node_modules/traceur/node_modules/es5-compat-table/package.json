{
  "name": "es5-compat-table",
  "version": "0.0.0",
  "main": "node.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/rvagg/es5-compat-table.git"
  },
  "private": true,
  "dependencies": {
    "chalk": "~0.5.0-1",
    "cheerio": "~0.10.1"
  },
  "readme": "ECMAScript 5/6/7/non-standard compatibility tables\n==================================================\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/kangax/es5-compat-table/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\nEditing the tests\n-----------------\n\nEdit the `data-es5.js`, `data-es6.js`, `data-es7.js`, or `data-non-standard.js` files to adjust the tests and their recorded browser results. Run `node build.js` to build the HTML files from these JavaScript sources.\n\nThe tests themselves should be written in pure ES3, *except* for the sole ES6 feature being tested (as well as any ES5 features strictly required to use the ES6 feature). The test code is placed in multi-line comments (as in [this hack](http://tomasz.janczuk.org/2013/05/multi-line-strings-in-javascript-and.html)), so that node can parse the data scripts without throwing syntax errors. The `build.js` script will wrap the code in an `eval` call inside a `try`, so the tests themselves do not need to catch errors that non-supporting platforms may throw.\n",
  "readmeFilename": "README.md",
  "description": "ECMAScript 5/6/7/non-standard compatibility tables ==================================================",
  "bugs": {
    "url": "https://github.com/rvagg/es5-compat-table/issues"
  },
  "homepage": "https://github.com/rvagg/es5-compat-table",
  "_id": "es5-compat-table@0.0.0",
  "_shasum": "b7f7fb5e06955c57329dfa8b0122bd55a7164d26",
  "_resolved": "git+https://github.com/kangax/compat-table.git#4a534cf193fc019ffb57ed55e66fe005c99701a4",
  "_from": "compat-table@git+https://github.com/kangax/compat-table.git#gh-pages"
}
