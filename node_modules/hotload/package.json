{
  "name": "hotload",
  "version": "0.0.5",
  "license": "MIT",
  "description": "Hot load (hot require) for NodeJS. It's like JRebel but for NodeJS.",
  "main": "lib/hotload.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jan-swiecki/node-hotload"
  },
  "engines": {
    "node": "0.10.*"
  },
  "keywords": [
    "hotload",
    "hotrequire",
    "jrebel"
  ],
  "dependencies": {
    "colors": "0.6.0-1",
    "callsite": "1.0.0"
  },
  "author": {
    "name": "Jan Święcki",
    "email": "jan.swiecki@gmail.com",
    "url": "https://github.com/jan-swiecki/node-hotload"
  },
  "gitHead": "14a17e38f12c0a3845eefaae7265afe5851b0d12",
  "readme": "# Hotload - Hot code reload for NodeJS\r\n\r\n### Version 0.0.5\r\n\r\n## TL;DR:\r\n\r\n```javascript\r\n// lib.js\r\nmodule.exports = {\r\n    \"key\": \"value\"\r\n}\r\n\r\n// index.js\r\nhotload = require(\"hotload\");\r\n\r\n//lib = require(\"lib\");\r\nlib = hotload(\"./lib.js\");\r\n\r\nsetInterval(function()\r\n{\r\n    // normally it would print 'value' indefinitely,\r\n    // but at runtime try to change value of \"key\" in lib.js\r\n    // and save lib.js file and see that module will be reloaded\r\n    // and new value will be printed.\r\n    console.log(lib.key);\r\n\r\n}, 1000);\r\n```\r\n\r\n## Install\r\n\r\n`> npm install hotload`\r\n\r\n## Usage\r\n\r\n### Introduction\r\n\r\nThe purpose is reload library without application shut down.\r\n\r\nIt is probably not suitable for production use.\r\n\r\nHotload only works on object modules. Non-object modules (E.g. `module.exports = \"abc\"`) will be `require`d normally but they cannot be hot reloaded. If you don't see why you should google about JavaScript's variable references and its pass-by-value nature.\r\n\r\n```javascript\r\n// index.js\r\nhotload = require(\"hotload\");\r\n\r\n// First argument is the same as for `require`. Second argument (callback) is optional.\r\n// Callback's first argument is the module object, which is exactly the same object\r\n// as returned by `hotload`.\r\nlib = hotload(\"./lib.js\", function(lib2){\r\n    // (lib === lib2) is true\r\n    console.log(\"lib has loaded/reloaded!\");\r\n});\r\n\r\n// Callback function is called on first module load\r\n// and on every module reload.\r\n```\r\n\r\nFrom now on if `lib.js` is modified it will be reloaded. How does it work? On `lib.js` file change hotload replaces all properties of original `lib` object with new ones.\r\n\r\nE.g. old `lib.js` could be:\r\n\r\n```javascript\r\n// old lib.js\r\nmodule.exports = {\r\n    \"a\": 10,\r\n    \"b\": 11\r\n};\r\n```\r\n\r\nAnd new `lib.js` could be\r\n\r\n```javascript\r\n// new lib.js\r\nmodule.exports = {\r\n    \"b\": 21,\r\n    \"c\": 22\r\n};\r\n```\r\n\r\nIn that case during runtime of `index.js` when we save `lib.js` (old version to new version) then `lib` object will become:\r\n\r\n```javascript\r\n{\r\n    \"b\": 21,\r\n    \"c\": 22\r\n}\r\n```\r\n\r\nSo after hot reload `lib` object can still be used. You don't need to use callback method to replace your references at all, it just works.\r\n\r\n### Additional information\r\n\r\nHotload will look out for imported object's methods `hlInit` and `hlUnload`. E.g.:\r\n\r\n```javascript\r\nmodule.exports = {\r\n    hlInit: function()\r\n    {\r\n        console.log(\"Module has been loaded/reloaded\");\r\n    },\r\n    hlUnload: function()\r\n    {\r\n        console.log(\"Module is being unloaded, better take down all event listeners so they don't overlap with new ones!\");\r\n    }\r\n}\r\n```\r\n\r\nAs mentioned in example's `hlUnload` function -- if your module has event listeners or any other long running tasks (e.g. `setInterval`) you should shut them down while unloading module, because if you don't when module is reloaded it will duplicate event listeners.\r\n\r\nYou could say \"Hey, wait a second! After module reload old module is gone, and I don't have access to event listeners so they must be gone too!\". Wrong. They are still running and worse -- you don't have access to them any more!",
  "readmeFilename": "README.md",
  "_id": "hotload@0.0.5",
  "dist": {
    "shasum": "d80c33d6bdbf9c1f8b1cc0c5f3c3a06d6bf808ff",
    "tarball": "http://registry.npmjs.org/hotload/-/hotload-0.0.5.tgz"
  },
  "_from": "hotload@*",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "jan-swiecki",
    "email": "jan.swiecki@gmail.com"
  },
  "maintainers": [
    {
      "name": "jan-swiecki",
      "email": "jan.swiecki@gmail.com"
    }
  ],
  "_shasum": "d80c33d6bdbf9c1f8b1cc0c5f3c3a06d6bf808ff",
  "_resolved": "https://registry.npmjs.org/hotload/-/hotload-0.0.5.tgz",
  "bugs": {
    "url": "https://github.com/jan-swiecki/node-hotload/issues"
  },
  "homepage": "https://github.com/jan-swiecki/node-hotload"
}
