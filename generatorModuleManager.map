{"version":3,"file":"app-build/generatorModuleManager.js","sources":["app/generatorModuleManager.js","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/9"],"names":[],"mappings":"AAEA;ACFA,KAAK,iBAAiB,AAAC,CAAC,OAAM;iBCA9B,EAAC,GAAE,YCAqB;AAAE,4BAAwB;IAAE,ADA9B,CAAC;iBAAvB,EAAC,GAAE,YCAqB;AAAE,4BAAwB;IAAE,ADA9B,CAAC;oBAAvB,EAAC,GAAE,YCAqB;AAAE,+BAAwB;IAAE,ADA9B,CAAC;AEAvB,WAAS,CCAT,EAAC,KAAI,CDAO,KAAG,ACAS,CAAC;CJAyB,CAAC;;;;ADEnD,AAAI,EAAA,CAAA,KAAI,EAAI,CAAA,OAAM,AAAC,CAAC,SAAQ,CAAC,CAAC;AAE9B,AAAI,EAAA,CAAA,SAAQ,EAAI,CAAA,OAAM,AAAC,CAAC,WAAU,CAAC,CAAC;SMJpC,EAAC,YAAoB,CAAA,OAAM,AAAC,WAAkB,CACtC,CAAA,aAAqB,sBAA2B,CAAA,aAAqB,GAAK,EAAC,OAAM,YAAmB,CAD9D,AAC+D,CAAC;ANStG,aAAS;AAAE,cAAU;AAAE,QAAI;EAK5B,cAAY,EMfnB,EAAC,wBAAoB,CAAA,OAAM,AAAC,uBAAkB,CACtC,CAAA,yBAAqB,kCAA2B,CAAA,yBAAqB,GAAK,EAAC,OAAM,wBAAmB,CAD9D,AAC+D,CAAC;ANgB9G,AAAI,EAAA,CAAA,CAAA,EAAI,CAAA,OAAM,AAAC,CAAC,QAAO,CAAC,CAAC;AAGlB,AAAI,EAAA,CAAA,eAAc,EAAI,IAAI,CAAA,KAAI,IAAI,AAAC,EAAC,CAAC;AAO5C,AAAI,EAAA,CAAA,EAAC,EAAI,CAAA,OAAM,AAAC,CAAC,IAAG,CAAC;AACjB,SAAK,EAAI,CAAA,OAAM,AAAC,CAAC,QAAO,CAAC,CAAC;EAEvB,YAAU,EM9BjB,EAAC,4BAAoB,CAAA,OAAM,AAAC,2BAAkB,CACtC,CAAA,6BAAqB,sCAA2B,CAAA,6BAAqB,GAAK,EAAC,OAAM,4BAAmB,CAD9D,AAC+D,CAAC;AN+B9G,AAAI,EAAA,CAAA,SAAQ,EAAE,CAAA,eAAc,IAAI,AAAC,CAAC,WAAU,CAAC,CAAC;AAE9C,QAAQ,QAAQ,AAAC,EAAC,SAAA,CAAA;OAAK,CAAA,OAAM,MAAM,AAAC,CAAC,6BAA4B,CAAE,EAAA,CAAC;AAAA,EAAC,CAAC;AAEtE,AAAI,EAAA,CAAA,oBAAmB,EAAI,IAAI,CAAA,KAAI,IAAI,AAAC,EAAC,CAAC;AAG1C,AAAI,EAAA,CAAA,eAAc,EAAI,UAAS,eAAc,CAAG,CAAA,WAAU;AACxD,AAAI,IAAA,CAAA,QAAO,EAAI,CAAA,SAAQ,OAAO,AAAC,CAAC,WAAU,CAAC,CAAC;AAC5C,QAAM,IAAI,AAAC,CAAC,0BAAyB,UAAU,KAAK,CAAE,CAAA,QAAO,IAAI,AAAC,CAAC,QAAO,CAAC,CAAC,CAAC;AAE7E,AAAI,IAAA,CAAA,UAAS,EAAI,CAAA,eAAc,SAAS,AAAC,EAAC,IAAI,AAAC,EAAC,SAAA,CAAA;SAAK,CAAA,CAAA,IAAI,AAAC,CAAC,SAAQ,CAAC;EAAA,EAAC,QAAQ,AAAC,EAAC,CAAC;AAChF,AAAI,IAAA,CAAA,kBAAiB,EAAI,CAAA,QAAO,IAAI,AAAC,CAAC,SAAQ,CAAC,SAAS,AAAC,EAAC,OAAO,AAAC,EAAC,SAAC,CAAA;AAClE,aAAqC,EAAA;AAAhC,mBAAW;AAAG,qBAAa,WAAM;AAGtC,SAAO,CAAA,CAAC,eAAc,IAAI,AAAC,CAAC,YAAW,CAAC,CAAA,EAAK,EAAC,cAAa,SAAS,AAAC,CAAC,eAAc,IAAI,AAAC,CAAC,YAAW,CAAC,IAAI,AAAC,CAAC,SAAQ,CAAC,CAAC,CAAA;EACxH,EACA,CAAC;AACD,KAAI,kBAAiB,MAAM,AAAC,EAAC,CAAA,CAAI,EAAA,CAAG;AAClC,UAAM,IAAI,AAAC,CAAC,qBAAoB,KAAK,IAAI,CAAG,CAAA,kBAAiB,KAAK,AAAC,EAAC,CAAC,CAAC;AAEtE,UAAM,IAAI,AAAC,CAAC,kBAAiB,KAAK,CAAE,CAAA,eAAc,SAAS,AAAC,EAAC,IAAI,AAAC,EAAC,SAAA,CAAA;WAAK,EAAC;AAAC,WAAG,CAAG,CAAA,CAAA,CAAE,CAAA,CAAC;AAAI,cAAM,CAAE,CAAA,CAAA,CAAE,CAAA,CAAC,IAAI,AAAC,CAAC,SAAQ,CAAC,KAAK,AAAC,EAAC;AAAA,MAAC,CAAC;IAAA,EAAC,KAAK,AAAC,EAAC,CAAC,CAAC;AACpI,SAAO,CAAA,QAAO,IAAI,AAAC,CAAC,gBAAe,CAAG,CAAA,SAAQ,IAAI,AAAC,CAAC;AAAC,SAAG,CAAE,qBAAmB;AAAG,QAAE,CAAE,sBAAoB;AAAG,YAAM,CAAE,mBAAiB;AAAA,IAAC,CAAC,CAAC,CAAC;EAC1I;AAAA,AACA,WAAiC,CAAA,aAAY,AAAC,CAAC,WAAU,cAAc,CAAG,gBAAc,CAAC;AAApF,cAAQ;AAAE,YAAM;AAAG,UAAI,WAA8D;AAC1F,AAAI,IAAA,CAAA,YAAW,EAAI,KAAG,CAAC;AACvB,KAAI,CAAC,OAAM,CAAG;AACZ,UAAM,MAAM,AAAC,CAAC,UAAS,CAAE,YAAU,CAAE,CAAA,WAAU,KAAK,IAAI,CAAC,CAAC;AAE1D,eAAW,EAAI,CAAA,SAAQ,OAAO,AAAC,CAAC,WAAU,CAAC,IAAI,AAAC,CAAC,gBAAe,CAAG,MAAI,CAAC,CAAC;EAC3E;AACE,eAAW,EAAI,CAAA,SAAQ,OAAO,AAAC,CAAC,WAAU,CAAC,MAAM,AAAC,CAAC;AAAC,cAAQ,CAAG,UAAQ;AAAG,qBAAe,CAAG,QAAM;AAAA,IAAC,CAAC,CAAC;AAAA,AAErG,OAAO,aAAW,CAAC;AACvB,CAAA;AAEA,AAAI,EAAA,CAAA,kBAAiB,EAAI,IAAI,CAAA,KAAI,IAAI,AAAC,EAAC,CAAC;AAExC,iBAAiB,KAAK,AAAC,CAAC,SAAQ,WAAW,AAAC,EAAC,CAAC,CAAC;AAG/C,AAAI,EAAA,CAAA,aAAY,EAAI,UAAS,eAAc,CAAG,CAAA,MAAK;AACjD,gBAAc,SAAS,AAAC,EAAC,QAAQ,AAAC,EAAC,SAAC,CAAA;AAClC,aAAmB,EAAA;AAAd,cAAM;AAAG,UAAE,WAAI;AACpB,OAAI,GAAE,IAAI,AAAC,CAAC,SAAQ,CAAC,IAAI,AAAC,CAAC,MAAK,CAAC,CAAG;AAClC,YAAM,IAAI,AAAC,CAAC,UAAS,UAAU,CAAG,CAAA,CAAC,EAAC,EAAE,QAAM,CAAC,UAAU,CAAE,mBAAiB,CAAC,CAAC;AAC5E,uBAAiB,KAAK,AAAC,CAAC,GAAE,KAAK,AAAC,EAAC,CAAC,CAAC;AACnC,kBAAY,AAAC,CAAC,eAAc,CAAG,CAAA,GAAE,IAAI,AAAC,CAAC,QAAO,CAAC,CAAC,CAAC;IACnD;AAAA,EACF,EAAC,CAAC;AACJ,CAAA;AAEA,AAAI,EAAA,CAAA,SAAQ,EACV,CAAA,KAAI,WAAW,AAAC,CAAC,oBAAmB,CAAG,mBAAiB,CAAC,IAAI,AAAC,EAAC,SAAA,CAAA;AAC7D,AAAI,IAAA,CAAA,GAAE,EAAI,gBAAc,YOvF5B,CAAA,eAAc,OAAO,CPuFY,CAAA,COvFO,CPuFN,CAAC;AAC/B,AAAI,IAAA,CAAA,eAAc,EAAI,CAAA,CAAA,CAAE,CAAA,CAAC,CAAC;AAC1B,AAAI,IAAA,CAAA,WAAU,EAAI,CAAA,CAAA,CAAE,CAAA,CAAC,CAAC;AACtB,KAAI,CAAC,GAAE,IAAI,AAAC,CAAC,gBAAe,CAAC;AAC3B,gBAAY,AAAC,CAAC,eAAc,CAAG,CAAA,WAAU,OAAO,CAAC,CAAC;AAAA,AACpD,OAAO,IAAE,CAAC;AACZ,EAAC,CAAC;AAGJ,AAAI,EAAA,CAAA,uBAAsB,EAAI,CAAA,SAAQ,WAAW,AAAC,EAAC,KAAK,AAAC,CACvD,SAAQ,IAAI,AAAC,EAAC,GAAG,SAAC,IAAG,CAAG,CAAA,IAAG;OAAM,CAAA,IAAG,IAAI,AAAC,CAAC,IAAG,IAAI,AAAC,CAAC,QAAO,CAAC,CAAG,KAAG,CAAC;AAAA,EACpE,CAAC;AAKD,mBAAmB,KAAK,AAAC,CAAC,uBAAsB,CAAC,CAAC;AAE3C,AAAI,EAAA,CAAA,eAAc,EAAI,wBAAsB,CAAC;AAE7C,AAAI,EAAA,CAAA,kBAAiB,EAAI,CAAA,SAAQ,QACjC,AAAC,EAAC,SAAA,CAAA;AACR,AAAI,IAAA,CAAA,CAAA,EAAI,CAAA,CAAA,KAAK,AAAC,EAAC,CAAC;AAEhB,OAAO,CAAA,KAAI,UAAU,AAAC,CAAC,CAAA,QAAQ,IAAI,AAAC,EAAC,SAAA,OAAM;SAAK,CAAA,CAAA,OAAO,AAAC,CAAC;AAAC,aAAO,CAAG,CAAA,CAAA,UAAU,EAAI,CAAA,CAAA,UAAU,CAAE,OAAM,CAAC,EAAI,KAAG;AAAG,WAAK,CAAG,CAAA,CAAA,OAAO;AAAG,SAAG,CAAE,QAAM;AAAA,IAAC,CAAE,EAAA,CAAC;EAAA,EAAC,CAAC,CAAC;AACpJ,EAAC,CAAC;AAwFF","sourceRoot":"app-build/","sourcesContent":["// var console = require('better-console');\n\nvar Bacon = require(\"baconjs\");\n\nvar Immutable = require(\"immutable\");\n\n\n\n\n\nimport {isIterable,getIterator,clone} from \"./utils\";\n\n\n\n\nimport evalSequences from \"./sequenceEvaluator\";\n\nvar _ = require(\"lodash\");\n\n\nexport var newSequenceCode = new Bacon.Bus();\n\n// export var loadedSequences = Immutable.Map();\n\n\n\n\nvar fs = require(\"fs\"),\n    mkpath = require(\"mkpath\");\n\nimport processCode from \"./sequenceCodeProcessor\";\n\nvar processed=newSequenceCode.map(processCode);\n\nprocessed.onError(e => console.error(\"Error while processing code\",e));\n\nvar loadedSequenceStream = new Bacon.Bus();\n\n\nvar evalStreamEntry = function(loadedSequences, newSequence) {\n  var newSeqIm = Immutable.fromJS(newSequence);\n  console.log(\"evaluating new Sequence:\".underline.bold,newSeqIm.get(\"device\"));\n\n  var allExports = loadedSequences.valueSeq().map(v => v.get(\"exports\")).flatten();\n  var unsatisfiedImports = newSeqIm.get(\"imports\").entrySeq().filter((i) => {\n    var [importDevice, importSeqNames] = i;\n    // if (loadedSequences.get(importDevice))\n    //   console.log(\"importdevice\",loadedSequences.get(importDevice).toJS(),\"imSeqNames\",importSeqNames.toJS());\n    return !loadedSequences.get(importDevice) || !importSeqNames.isSubset(loadedSequences.get(importDevice).get(\"exports\"))\n  }\n  );\n  if (unsatisfiedImports.count() > 0) {\n    console.log(\"imports unSatisfied\".bold.red, unsatisfiedImports.toJS());\n    // console.log(\"all imports\",newSeqIm.get(\"imports\").entrySeq().toJS());\n    console.log(\"existing exports\".bold,loadedSequences.entrySeq().map(s => ({name: s[0],  exports:s[1].get(\"exports\").toJS()})).toJS());\n    return newSeqIm.set(\"evaluatedError\", Immutable.Map({type:\"importsUnsatisfied\", msg:\"imports unsatisfied\", imports:unsatisfiedImports}));\n  }\n  var [evaluated,details, error] = evalSequences(newSequence.processedCode, loadedSequences);\n  var evaluatedRes = null;\n  if (!details) {\n    console.error(\"eval of \",newSequence,\"FAILED!!!\".bold.red);\n    //return Bacon.never();\n    evaluatedRes = Immutable.fromJS(newSequence).set(\"evaluatedError\", error);\n  } else\n    evaluatedRes = Immutable.fromJS(newSequence).merge({evaluated: evaluated, evaluatedDetails: details});\n    // console.log(\"evalSequences result\", evaluatedRes.toJS());\n    return evaluatedRes;\n}\n\nvar processedAndReEval = new Bacon.Bus();\n\nprocessedAndReEval.plug(processed.skipErrors());\n\n\nvar markForReEval = function(loadedSequences, device) {\n  loadedSequences.entrySeq().forEach((s) => {\n    var [seqName, seq]=s;\n    if (seq.get(\"imports\").get(device)) {\n      console.log(\"marking \".bgMagenta, (\"\"+seqName).underline,\"for reEvaluation\");\n      processedAndReEval.push(seq.toJS());\n      markForReEval(loadedSequences, seq.get(\"device\"));\n    }\n  });\n}\n\nvar evaluated =\n  Bacon.zipAsArray(loadedSequenceStream, processedAndReEval).map(s => {\n    var res = evalStreamEntry(...s);\n    var loadedSequences = s[0];\n    var newSequence = s[1];\n    if (!res.get(\"evaluatedError\"))\n      markForReEval(loadedSequences, newSequence.device);\n    return res;\n  });\n\n\nvar evaluatedSequenceStream = evaluated.skipErrors().scan(\n  Immutable.Map(), (prev, next) => prev.set(next.get(\"device\"), next)\n);\n\n// evaluatedSequenceStream.onValue(v => console.log(\"evaluated\".bold.underline, v.valueSeq().map(v=>v.get(\"evaluatedDetails\")).toJS()));\n\n\nloadedSequenceStream.plug(evaluatedSequenceStream);\n\nexport var loadedSequences = evaluatedSequenceStream;\n\nexport var processedSequences = evaluated//.filter((n) => n.get(\"evaluated\"))//.flatMap((n) => n.get(\"evaluated\").toJS());\n.flatMap(n => {\n var n = n.toJS();\n // console.log(\"flatMap\",Object.keys(n.evaluated).map(seqName => ({device: n.device, name:seqName})));\n return Bacon.fromArray(n.exports.map(seqName => _.extend({sequence: n.evaluated ? n.evaluated[seqName] : null, device: n.device, name:seqName},n)));\n});\n\n\n// processedSequences.log(\"processedSequences\");\n// evaluatedSequenceStream.\n\n\n// var evaluated = unEvaluated.map(s => {\n//   console.log(\"evaluating\",s);\n//   var [evaluated,success] = evalSequences(s.processedCode,loadedSequences);\n//   if (!success) {\n//     console.error(\"eval of \",seqCode.device,\"FAILED!!!\".bold.red);\n//     return;\n//   }\n//   newDev = newDev.set(\"evaluated\",evaluated);\n//   newDev = newDev.set(\"satisfiedDeps\",true);\n// });\n\n//\n//\n// loadedSequenceStream.onValue((seqCode) => {\n//   console.log(\"received seq code to eval\",seqCode.toJS());\n//   return;\n//   // fs.writeFileSync(processedPath,compiled);\n//\n//\n//   // var compiled = traceur.compile(seqCode.code,{modules:\"register\", generators:\"parse\", blockBinding:\"parse\"});\n//\n//   // var newDev = Immutable.Map(seqCode);\n//   console.log(\"newDevSeq\",newDev.toJS());\n//   var [evaluated,success] = evalSequences(newDev.get(\"processedCode\"),loadedSequences);\n//   if (!success) {\n//     console.error(\"eval of \",seqCode.device,\"FAILED!!!\".bold.red);\n//     return;\n//   }\n//   newDev = newDev.set(\"evaluated\",evaluated);\n//   newDev = newDev.set(\"satisfiedDeps\",true);\n//\n//   console.log(\"newDev after eval\",newDev.toJS());\n//\n//   // if (loadedSequences.get(seqCode.device) && \"\"+newDev.toJS().evaluated == \"\"+loadedSequences.get(seqCode.device).toJS().evaluated) {\n//   //   console.log(\"is Equal:\"+newDev.toJS().evaluated);\n//   //   console.log(\"NO CHANGE DETECTED IN \"+seqCode.device+\" ignoring\".bgRed);\n//   // }\n//\n//   loadedSequences = loadedSequences.set(seqCode.device,newDev);\n//\n//\n//   var newSequences = loadedSequences.map((s,sName) => {\n//     console.log(\"lsmap\",s);\n//     if (s.get(\"imports\").keySeq().contains(seqCode.device)) {\n//       console.log(\"devalitaing\",sName,\"because \",seqCode.device,\" was compiled\");\n//       return s.set(\"evaluated\",null).set(\"satisfiedDeps\",false);\n//     }\n//     else\n//       return s;\n//   })\n//\n//\n//   var reRun=false;\n//   do {\n//     var updated = null;\n//     [updated, newSequences,reRun] = checkDepsAndEval(newSequences);\n//     updated.unshift(seqCode.device);\n//     console.log(\"evaluated sequences\",updated);\n//     for (var device of updated) {\n//       var seqs = newSequences.get(device).get(\"evaluated\");\n//       for (var seqName of Object.keys(seqs)) {\n//         console.log(\"passing on evaluated\",seqName);\n//         processedSequences.push({device:device, name: seqName, sequence:seqs[seqName], code: newSequences.get(device).get(\"code\")});\n//       }\n//     }\n//     loadedSequences = newSequences;\n//   }\n//   while(reRun);\n//   return loadedSequences = newSequences;\n// });\n\n\n//\n//\n// newSequenceCode.push({device:\"ableton1\", code:\"export var test=1; import {needed} from 'ableton2'; console.log('success',needed);\"});\n// newSequenceCode.push({device:\"ableton2\", code:\"export var needed='yes';\"});\n// newSequenceCode.push({device:\"ableton3\", code:\"export var needing=1; import {needed} from 'ableton4';\"});\n\n// console.log(\"afterwards:\",loadedSequences.toJS());\n\n// throw \"bye\";\n","Object.defineProperties(exports, $__placeholder__0);","{get: $__placeholder__0}","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true","{value: $__placeholder__0}","($__placeholder__0 = require($__placeholder__1),\n        $__placeholder__2 && $__placeholder__3.__esModule && $__placeholder__4 || {default: $__placeholder__5})","$traceurRuntime.spread($__placeholder__0)"]}